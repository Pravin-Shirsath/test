{"version":3,"sources":["Components/Widgets/ToDoList.js"],"names":["TodoListWidget","useState","toDoListData","setToDoListData","sectionReload","setSectionReload","addNewTodoDialog","setAddNewTodoDialog","todoTitle","time","date","newTodo","setNewTodo","snackbar","setSnackbar","snackbarMessage","setSnackbarMessage","useEffect","getTodo","api","get","then","response","data","catch","error","handleChange","value","selectedTodoIndex","indexOf","newState","update","completed","$set","setTimeout","handleClose","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","map","key","button","onClick","classnames","control","checked","color","onChange","event","target","title","variant","size","e","task","stopPropagation","todos","index","splice","onDeleteTask","id","open","onClose","margin","label","type","fullWidth","InputLabelProps","shrink","todo","push","anchorOrigin","vertical","horizontal","autoHideDuration","snackbarcontentprops","message"],"mappings":"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","file":"static/js/178.bcc99dcd.chunk.js","sourcesContent":["/**\n * Todo List Widget\n */\nimport React, { useState, Fragment, useEffect } from 'react';\nimport { FormControlLabel, Checkbox, List, ListItem, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar, Fab} from '@material-ui/core';\nimport update from 'react-addons-update';\nimport classnames from 'classnames';\nimport { Scrollbars } from 'react-custom-scrollbars';\n// api\nimport api from 'Api';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n\nfunction TodoListWidget() {\n   const [toDoListData, setToDoListData] = useState(null);\n   const [sectionReload, setSectionReload] = useState(false);\n   const [addNewTodoDialog, setAddNewTodoDialog] = useState(false);\n   const [newTodo, setNewTodo] = useState({\n      todoTitle: '',\n      time: null,\n      date: ''\n   });\n   const [snackbar, setSnackbar] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('')\n\n   useEffect(() => {\n      getTodo();\n   },[])\n\n   // get todo\n   const getTodo = () =>  {\n      setSectionReload(true);\n      api.get('todo.js')\n         .then((response) => {\n            setToDoListData(response.data);\n            setSectionReload(false)\n         }).catch(error => {\n            setToDoListData(null);\n            setSectionReload(false);\n         })\n   }\n\n   /**\n    * On Delete Task\n    */\n   const onDeleteTask = (e, task) => {\n      e.stopPropagation();\n      setSectionReload(true);\n      let todos = toDoListData;\n      let index = todos.indexOf(task);\n\n      setTimeout(() => {\n         todos.splice(index, 1);\n         setToDoListData(todos);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Todo Deleted Successfully');\n      }, 1500);\n   }\n\n   // on change task status\n   const handleChange = (value, data) => {\n      let selectedTodoIndex = toDoListData.indexOf(data);\n      let newState = update(toDoListData, {\n         [selectedTodoIndex]: {\n            completed: { $set: value }\n         }\n      });\n      setSectionReload(true);\n      setTimeout(() => {\n         setToDoListData(newState);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Todo Updated');\n      }, 1500);\n   }\n\n   // open add new todo dialog\n   const opnAddNewTodoDialog = () => {\n      setAddNewTodoDialog(true);\n      setNewTodo({\n         todoTitle: '',\n         time: null,\n         date: ''\n      });\n   }\n\n   // handle close add new todo dailog\n   const handleClose = () => {\n      setAddNewTodoDialog(false);\n   }\n\n   // add new todo\n   const addNewTodo = () => {\n      if (newTodo.todoTitle !== '' && newTodo.date) {\n         let todos = toDoListData;\n         let todo\n         todo = {\n            title: newTodo.todoTitle,\n            date: newTodo.date,\n            completed: false\n         }\n         setSectionReload(true);\n         setAddNewTodoDialog(false);\n         setTimeout(() => {\n            todos.push(todo);\n            \n            setToDoListData(todos);\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Todo Added Successfully!');\n         }, 1500);\n      }\n   }\n\n   return (\n      <Fragment>\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={420} autoHide>\n            <List className=\"p-0\">\n               {toDoListData && toDoListData.map((data, key) => (\n                  <ListItem className=\"border-bottom\" button key={key} onClick={() => handleChange(!data.completed, data)}>\n                     <div className={classnames('d-flex justify-content-between align-items-center w-100', { 'strike': data.completed })}>\n                        <div className=\"d-flex align-items-center clearfix\">\n                           <div className=\"float-left\">\n                              <FormControlLabel\n                                 className=\"mb-0\"\n                                 control={\n                                    <Checkbox\n                                       checked={data.completed}\n                                       color=\"primary\"\n                                       onChange={(event) => handleChange(event.target.checked, data)}\n                                    />\n                                 }\n                              />\n                           </div>\n                           <div className=\"float-left\">\n                              <p className=\"mb-0\">{data.title}</p>\n                              {data.date && <span className=\"d-block fs-12 text-muted\">{data.date}</span>}\n                           </div>\n                        </div>\n                        <div className=\"hover-action\">\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white\"\n                              onClick={(e) => onDeleteTask(e, data)}\n                           >\n                              <i className=\"zmdi zmdi-delete\"></i>\n                           </Fab>\n                        </div>\n                     </div>\n                  </ListItem>\n               ))}\n            </List>\n         </Scrollbars>\n         <div className=\"d-flex p-3\">\n            <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => opnAddNewTodoDialog()}><IntlMessages id=\"widgets.addNew\" /></Button>\n         </div>\n         <Dialog\n            open={addNewTodoDialog}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">\n               <IntlMessages id=\"components.addNewTasks\" />\n            </DialogTitle>\n            <DialogContent>\n               <DialogContentText>\n                  Add New Todo, Add Todo Title And Select Time For Todo.\n                  </DialogContentText>\n               <TextField\n                  margin=\"dense\"\n                  id=\"name\"\n                  onChange={(e) => setNewTodo({ ...newTodo, todoTitle: e.target.value})}\n                  label=\"Todo Title\"\n                  type=\"text\"\n                  fullWidth\n                  value={newTodo.todoTitle}\n               />\n               <TextField\n                  id=\"date\"\n                  label=\"Schedule Date\"\n                  type=\"date\"\n                  InputLabelProps={{\n                     shrink: true\n                  }}\n                  fullWidth\n                  onChange={(e) => setNewTodo({ ...newTodo, date: e.target.value })}\n               />\n            </DialogContent>\n            <DialogActions>\n               <Button variant=\"contained\" onClick={handleClose} className=\"btn-danger text-white\">\n                  <span><IntlMessages id=\"button.cancel\" /></span>\n               </Button>\n               <Button variant=\"contained\" onClick={addNewTodo} color=\"primary\" className=\"text-white\">\n                  <span><IntlMessages id=\"button.add\" /></span>\n               </Button>\n            </DialogActions>\n         </Dialog>\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            snackbarcontentprops={{\n               'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </Fragment>\n   )\n}\n\nexport default TodoListWidget;"],"sourceRoot":""}