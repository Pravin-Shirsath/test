{"version":3,"sources":["Components/Widgets/Notifications.js"],"names":["TabContainer","children","dir","component","style","padding","withStyles","withTheme","props","useState","value","setValue","messages","setMessages","notificationTypes","setNotificationTypes","notifications","setNotifications","useEffect","getMessages","getNotificationTypes","getNotifications","api","get","then","response","data","catch","error","console","log","getNotificationName","notificationId","notificationType","id","className","class","icon","Name","theme","position","color","onChange","event","indicatorColor","textColor","variant","label","autoHeight","autoHeightMin","autoHeightMax","autoHide","axis","direction","index","onChangeIndex","map","notification","key","date","userName","src","userAvatar","alt","width","height","message","from"],"mappings":"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","file":"static/js/140.35307605.chunk.js","sourcesContent":["/**\n * Notifications Widget\n */\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Typography from '@material-ui/core/Typography';\n\n// api\nimport api from 'Api';\n\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\nfunction TabContainer({ children, dir }) {\n   return (\n      <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n         {children}\n      </Typography>\n   );\n}\n\nfunction Notifications(props) {\n   const [value, setValue] = useState(0);\n   const [messages, setMessages] = useState(null);\n   const [notificationTypes, setNotificationTypes] = useState(null);\n   const [notifications, setNotifications] = useState(null);\n\n   useEffect(() => {\n      getMessages();\n      getNotificationTypes();\n      getNotifications();\n   },[]);\n\n   // get messages\n   const getMessages = () => {\n      api.get('messages.js')\n         .then((response) => {\n            setMessages(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notification types\n   const getNotificationTypes = () => {\n      api.get('notificationTypes.js')\n         .then((response) => {\n            setNotificationTypes(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notifications\n   const getNotifications = () => {\n      api.get('notifications.js')\n         .then((response) => {\n            setNotifications(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   const handleChange = (event, value) => {\n      setValue(value);\n   };\n\n   const handleChangeIndex = index => {\n      setValue(index);\n   };\n\n   /**\n    * Function to return notification name\n    */\n   const getNotificationName = (notificationId) => {\n      if (notificationTypes) {\n         for (const notificationType of notificationTypes) {\n            if (notificationId === notificationType.id) {\n               return (\n                  <span className={`text-${notificationType.class} mr-5`}>\n                     <i className={`zmdi zmdi-${notificationType.icon}`}></i> {notificationType.Name}\n                  </span>\n               );\n            }\n         }\n      }\n   }\n\n   const { theme } = props;\n   return (\n      <Fragment>\n         <AppBar position=\"static\" color=\"default\">\n            <Tabs\n               value={value}\n               onChange={handleChange}\n               indicatorColor=\"primary\"\n               textColor=\"primary\"\n               variant=\"fullWidth\"\n            >\n               <Tab label={<IntlMessages id=\"widgets.recentNotifications\" />} />\n               <Tab label={<IntlMessages id=\"widgets.messages\" />} />\n            </Tabs>\n         </AppBar>\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={375} autoHide>\n            <SwipeableViews\n               axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n               index={value}\n               onChangeIndex={handleChangeIndex}>\n               <div className=\"card mb-0 notification-box\">\n                  <TabContainer dir={theme.direction}>\n                     <ul className=\"list-inline mb-0\">\n                        {notifications && notifications.map((notification, key) => (\n                           <li className=\"d-flex justify-content-between\" key={key}>\n                              <div className=\"align-items-start\">\n                                 <p className=\"mb-5 message-head\">\n                                    {getNotificationName(notification.notificationId)}\n                                    {notification.date}\n                                 </p>\n                                 <h5 className=\"mb-5\">{notification.userName}</h5>\n                                 <p className=\"mb-0 text-muted\">{notification.notification}</p>\n                              </div>\n                              <div className=\"align-items-end notify-user\">\n                                 <img src={notification.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                              </div>\n                           </li>\n                        ))}\n                     </ul>\n                  </TabContainer>\n               </div>\n               <div className=\"card mb-0 notification-box\">\n                  <TabContainer dir={theme.direction}>\n                     <ul className=\"list-inline mb-0\">\n                        {messages && messages.map((message, key) => (\n                           <li className=\"d-flex justify-content-between\" key={key}>\n                              <div className=\"align-items-start\">\n                                 <p className=\"mb-5 message-head\">\n                                    <span className=\"text-primary mr-5\">\n                                       <i className=\"zmdi zmdi-comment-alt-text\"></i> <IntlMessages id=\"widgets.messages\" /></span> {message.date}\n                                 </p>\n                                 <h5 className=\"mb-5\">{message.from.userName}</h5>\n                                 <p className=\"mb-0 text-muted\">{message.message}</p>\n                              </div>\n                              <div className=\"align-items-end notify-user\">\n                                 <img src={message.from.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                              </div>\n                           </li>\n                        ))}\n                     </ul>\n                  </TabContainer>\n               </div>\n            </SwipeableViews>\n         </Scrollbars>\n      </Fragment>\n   );\n}\n\nexport default withStyles(null, { withTheme: true })(Notifications);\n"],"sourceRoot":""}