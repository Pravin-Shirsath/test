{"version":3,"sources":["Routes/dashboard/ListOfTask/index.js","Routes/dashboard/ReuseComponent/CustomBreadcrumbs.js","Constants/DateFormator.js","../node_modules/reactstrap/es/Col.js","Routes/dashboard/ReuseComponent/EditDataset.js"],"names":["ViewProject","props","history","useHistory","location","useState","searchText","setSearchText","loading","deleteConfirmationDialog","useRef","selected","datasets","setFilteredDatasets","activePage","totalPageCount","setTotalPageCount","datasetFiles","setDatasetFiles","filteredDatasetFiles","setFilteredDatasetFiles","useEffect","localStorage","getItem","getDatasetFiles","authToken","JSON","parse","datasetId","ViewFiles","then","res","console","log","status","data","results","updatedResults","map","result","selectedFile","parseInt","count","catch","error","response","NotificationManager","clear","push","className","name","content","currentPage","state","breadcrumbData","title","message","onConfirm","accessToken","DeleteDataset","id","project_id","current","close","success","err","Delete_Datset","ref","style","justifyContent","type","placeholder","border","borderBottom","value","onChange","e","target","variant","color","cursor","onClick","projectId","getSearchProjectDatasets","length","marginBottom","listStyle","gap","margin","itemsCountPerPage","pageRangeDisplayed","itemClass","linkClass","hideFirstLastPages","totalItemsCount","CustomBreadcrumbs","HandleNavigate","item","index","myarray","i","url","undefined","getFormatDate2","date","toString","replace","split","_excluded","stringOrNumberProp","PropTypes","oneOfType","number","string","columnProps","bool","shape","size","order","offset","propTypes","tag","tagPropType","xs","sm","md","lg","xl","cssModule","object","widths","array","defaultProps","getColumnSizeClass","isXs","colWidth","colSize","Col","Tag","attributes","_objectWithoutPropertiesLoose","colClasses","forEach","columnProp","isObject","_classNames","colSizeInterfix","colClass","mapToCssModules","classNames","_colClass","classes","React","createElement","_extends","EditDataset","Modalopen","reloadlist","open","setOpen","datasetName","setDatasetName","comment","setComment","dataset_name","onClose","padding","marginTop","row","for","height","UpadatDataset"],"mappings":"4TAmDe,SAASA,EAAYC,GAAQ,IAAD,EACnCC,EAAUC,cACVC,EAAUH,EAAVG,SAGN,EAA0BC,mBAAS,IAAG,mBAEtC,GAFY,KAAU,KAEoBA,mBAAS,KAAG,mBACtD,GADoB,KAAkB,KACFA,mBAAS,KAAG,mBAAzCC,EAAU,KAAEC,EAAa,KAGhC,EAAgCF,mBAAS,IAAG,mBAC5C,GADe,KAAa,KACFA,mBAAS,KAAG,mBAEtC,GAFY,KAAU,KAEkBA,mBAAS,OAAK,mBACtD,GADmB,KAAiB,KACNA,oBAAS,IAAM,mBAAtCG,EAAO,KACd,GAD0B,KACoBH,oBAAS,IAAM,mBAC7D,GADsB,KAAoB,KACUA,oBAAS,IAAM,mBACnE,GADyB,KAAuB,KACFA,oBAAS,IAAM,mBAEvDI,GAFgB,KAAoB,KAETC,oBACjC,EAAoCL,mBAAS,CAAC,GAAE,mBAAzCM,EAAQ,KAEf,GAFgC,KAEAN,mBAAS,OAAK,mBAC9C,GADe,KAAa,KACcA,mBAAS,IAAE,mBACrD,GADoB,KAAkB,KACAA,sBAAU,mBAClD,GADoB,KAAgB,KACSA,oBAAS,IAAM,mBAE1D,GAFoB,KAAmB,KAEPA,mBAAS,KAAG,oBAArCO,GAAQ,MACf,IAD4B,MACmBP,mBAAS,KAAG,qBAAnCQ,IAAD,MAAoB,OAC3C,GAAoCR,mBAAS,GAAE,qBAAxCS,GAAU,MACjB,IADgC,MACYT,mBAAS,IAAE,qBAAhDU,GAAc,MAAEC,GAAiB,MACxC,GAAwCX,mBAAS,IAAG,qBAA7CY,GAAY,MAAEC,GAAe,MACpC,GAAwDb,mBAAS,IAAG,qBAA7Dc,GAAoB,MAAEC,GAAuB,MACpD,GAA0Cf,mBAAS,IAAG,qBAAlC,MAAkB,MAEtCgB,qBAAU,WACeC,aAAaC,QAAQ,cAO5CC,IAEF,GAAG,IAEH,IAAMA,GAAkB,WAAO,IAAD,EACtBC,EAAYC,KAAKC,MAAML,aAAaC,QAAQ,UAC5CK,EAAwB,QAAf,EAAGN,oBAAY,aAAZ,EAAcC,QAAQ,aAGvB,OAAdE,EACCI,YAAUJ,EAAWG,EAAW,GAC/BE,MAAK,SAAAC,GAEF,GADAC,QAAQC,IAAIF,EAAK,6BACC,MAAZ,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,QAAc,CAAC,IAAD,MAClBF,QAAQC,IAAO,OAAHF,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKI,YAAI,WAAN,EAAH,EAAWC,QAAS,yCAChC,IACMC,GADa,OAAHN,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKI,YAAI,WAAN,EAAH,EAAWC,SACIE,KAAI,SAAAC,GAC/B,OAAO,2BAAIA,GAAM,IAAEC,cAAc,GACrC,IAEAtB,GAAgBmB,GAChBjB,GAAwBiB,GACxBrB,GAAkByB,SAAY,OAAHV,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKI,YAAI,WAAN,EAAH,EAAWO,OAC1C,MACIV,QAAQC,IAAI,iEAAkEF,EAEtF,IACCY,OAAM,SAACC,GAAS,IAAD,EACZZ,QAAQC,IAAI,wBAAwBW,GACpC,IAAMV,EAAc,OAALU,QAAK,IAALA,GAAe,QAAV,EAALA,EAAOC,gBAAQ,WAAV,EAAL,EAAiBX,OACnB,KAAVA,GACDY,sBAAoBF,MAAM,0BAC1BtB,aAAayB,QACb7C,EAAQ8C,KAAK,WACK,KAAVd,GACRY,sBAAoBF,MAAM,iCAEhC,KAEFtB,aAAayB,QACb7C,EAAQ8C,KAAK,UAEnB,EAoJE,OACE,sBAAKC,UAAU,kBAAiB,UAC9B,eAAC,IAAM,WACL,gCAAO,0BACP,sBAAMC,KAAK,cAAcC,QAAQ,yBAOnC,cAAC,IAAiB,CAAIC,YAAa,YAAajB,KAAc,OAAR/B,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUiD,aAAK,WAAP,EAAR,EAAiBC,iBAG7D,cAAC,IAAwB,CAACC,MAAM,+BACnCC,QAAQ,6CACRC,UAAW,kBAnJA,WAGpB,IAAMC,EAAchC,KAAKC,MAAML,aAAaC,QAAQ,UAChC,OAAhBmC,GAEFC,YAAcD,EAAqB,OAAR/C,QAAQ,IAARA,OAAQ,EAARA,EAAUiD,GAAW,OAARjD,QAAQ,IAARA,OAAQ,EAARA,EAAUkD,YAC/C/B,MAAK,SAACC,GACe,OAAb,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,SACPzB,EAAyBqD,QAAQC,QAEjCjB,sBAAoBkB,QAAQ,gCAC5BhC,QAAQC,IAAI,2BAA4BF,IAKxCe,sBAAoBF,MAAM,2CAE9B,IACCD,OAAM,SAACsB,GACNjC,QAAQC,IAAI,+BAAgCgC,GAC5CnB,sBAAoBF,MAAM,2CAC5B,GAEN,CA0H4BsB,EAAe,EAChCC,IAAK1D,IACZ,eAAC,IAAkB,WAEjB,sBAAKwC,UAAU,mBAAkB,UAC/B,sBAAKA,UAAU,mCAAmCmB,MAAO,CAAEC,eAAgB,iBAAkB,UAC3F,sBAAKpB,UAAU,aAAY,UACzB,uBAAOqB,KAAK,OAAOC,YAAY,SAAStB,UAAU,oBAAoBmB,MAAO,CAAEI,OAAQ,OAAQC,aAAc,mBAAqBC,MAAOpE,EAAYqE,SAAU,SAACC,GAAC,OAAKrE,EAAcqE,EAAEC,OAAOH,MAAM,IACnM,cAAC,IAAM,CAACI,QAAQ,YAAYC,MAAM,UAAU9B,UAAU,kBAAkBmB,MAAO,CAAEY,OAAQ,WACxFC,QAlDmB,WAAO,IAAD,EAC9BvB,EAAchC,KAAKC,MAAML,aAAaC,QAAQ,UAC9C2D,EAAwB,QAAf,EAAG5D,oBAAY,aAAZ,EAAcC,QAAQ,UACpB,OAAhBmC,GACDyB,YAAyBzB,EAAYwB,EAAW5E,GAC9CwB,MAAK,SAACC,GAAS,IAAD,EAC2C,EAApC,OAAb,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,UAAqB,OAAHH,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKI,YAAI,WAAN,EAAH,EAAWC,QAAQgD,QAAO,GACnDvE,GAAuB,OAAHkB,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKI,YAAI,WAAN,EAAH,EAAWC,SAC/B7B,EAAc,MAIdM,GAAoBD,IACpBL,EAAc,IACduC,sBAAoBF,MAAM,qBAE9B,IACCD,OAAM,SAACsB,GACN,GAGR,EA6B8C,SACjC,cAGH,cAAC,IAAM,CACNgB,QAjCa,WACxB/E,EAAQ8C,KAAK,8BACf,EAgCY8B,QAAQ,YAAYC,MAAM,UAAU9B,UAAU,kBAAkBmB,MAAO,CAAEY,OAAQ,WAAY,SAAE,sBAIjG,qBAAK/B,UAAU,+FAA+FmB,MAAO,CAACiB,aAAa,QAAQ,SACzI,qBAAIpC,UAAU,qEAAqEmB,MAAO,CAACkB,UAAW,OAAQC,IAAK,OAAQC,OAAO,OAAO,UACrI,6BAAI,eACJ,6BAAI,kBACJ,6BAAI,aACJ,6BAAI,mBAGV,wBAAOvC,UAAU,sCAAqC,UACpD,gCACE,+BACE,uBACA,6BAAI,SACJ,6BAAI,WACJ,6BAAI,WACJ,6BAAI,SACJ,6BAAI,iBACJ,6BAAI,gBAKR,gCAmBQ,qBAAIA,UAAU,mBAAkB,UAC9B,uBACA,6BAAI,WACJ,6BAAI,YACJ,6BAAI,MACJ,oBAAIA,UAAU,sBAAqB,SAAC,aACpC,6BAAI,kBACJ,6BAAI,iBAMgB,GAA/B9B,GAAqBiE,QAAe,wBAAQhB,MAAO,CAAEW,MAAO,SAAU,SAAC,yBAE1D,OAAZ9D,SAAY,IAAZA,QAAY,EAAZA,GAAcmE,QAAS,GACvB,qBAAKnC,UAAU,gBAAe,SAC5B,cAAC,IAAU,CACTnC,WAAYA,GACZ2E,kBAAmB,EACnBC,mBAAoB,EACpBf,SAAU,SAACC,GAAyB,EACpCe,UAAU,YACVC,UAAU,YACVC,oBAAoB,EACpBC,gBAAiB/E,UAKxBP,GAAW,cAAC,IAAgB,SAMrC,C,oFChWeuF,IAzCW,SAAH,GAAyC,IAAnC3C,EAAW,EAAXA,YAAY,EAAD,EAAEjB,YAAI,MAAE,GAAE,EAElD,GAFyD,EAALlC,MAEzBI,mBAAS8B,IAAK,mBAA3B,KAAW,KAGzBd,qBAAU,WAEV,GAAE,IAEA,IAAMnB,EAAUC,cACZ6B,QAAQC,IAAIE,EAAK,YAErB,IAAM6D,EAAc,iDAAG,WAAOC,EAAKC,GAAK,mFAMrC,IAJGC,EAAQ,GAIFC,EAAI,EAAGA,EAAIF,EAAOE,IAE1BD,EAAQnD,KAAKb,EAAKiE,IAExBpE,QAAQC,IAAIkE,EAAQ,WAEhBjG,EAAQ8C,KAAKiD,EAAKI,IAAI,CAAC/C,eAAe6C,IAAS,2CAChD,gBAbmB,wCAepB,OACE,sBAAKlD,UAAU,wCAAuC,eAC3CqD,GAARnE,GAAsBA,EAAKiD,OAAS,GAAIjD,EAAKG,KAAI,SAAC2D,EAAMC,GAAK,OAC5D,sBAAiBjD,UAAU,mDAAmDmB,MAAO,CAACY,OAAO,WAAW,UAExG,mBAAG/B,UAAU,iDAAmD,IAAC,sBAAMgC,QAAS,kBAAIe,EAAeC,EAAKC,EAAM,EAAEjD,UAAU,yCAAwC,SAAEgD,EAAK/C,SAF/JgD,EAIJ,IAER,sBAAKjD,UAAU,8DAA+DmB,MAAO,CAACY,OAAO,WAAW,UAAC,mBAAG/B,UAAU,kDAAoD,sBAAMA,UAAU,yCAAwC,SAAEG,SAG1O,C,mCC3CA,kCACO,IAkCOmD,EAAe,SAACC,GAC1B,OAAGA,EACSA,EAAKC,WAAWC,QAAQ,IAAK,KAAKA,QAAQ,OAAQ,IAAIC,MAAM,KAC1D,GAGH,EAGf,C,mCC5CA,4EAEIC,EAAY,CAAC,YAAa,YAAa,SAAU,OAMjDC,EAAqBC,IAAUC,UAAU,CAACD,IAAUE,OAAQF,IAAUG,SACtEC,EAAcJ,IAAUC,UAAU,CAACD,IAAUK,KAAML,IAAUE,OAAQF,IAAUG,OAAQH,IAAUM,MAAM,CACzGC,KAAMP,IAAUC,UAAU,CAACD,IAAUK,KAAML,IAAUE,OAAQF,IAAUG,SACvEK,MAAOT,EACPU,OAAQV,MAENW,EAAY,CACdC,IAAKC,IACLC,GAAIT,EACJU,GAAIV,EACJW,GAAIX,EACJY,GAAIZ,EACJa,GAAIb,EACJjE,UAAW6D,IAAUG,OACrBe,UAAWlB,IAAUmB,OACrBC,OAAQpB,IAAUqB,OAEhBC,EAAe,CACjBX,IAAK,MACLS,OApBc,CAAC,KAAM,KAAM,KAAM,KAAM,OAuBrCG,EAAqB,SAA4BC,EAAMC,EAAUC,GACnE,OAAgB,IAAZA,GAAgC,KAAZA,EACfF,EAAO,MAAQ,OAASC,EACV,SAAZC,EACFF,EAAO,WAAa,OAASC,EAAW,QAG1CD,EAAO,OAASE,EAAU,OAASD,EAAW,IAAMC,CAC7D,EAEIC,EAAM,SAAaxI,GACrB,IAAIgD,EAAYhD,EAAMgD,UAClB+E,EAAY/H,EAAM+H,UAClBE,EAASjI,EAAMiI,OACfQ,EAAMzI,EAAMwH,IACZkB,EAAaC,YAA8B3I,EAAO2G,GAElDiC,EAAa,GACjBX,EAAOY,SAAQ,SAAUP,EAAUnC,GACjC,IAAI2C,EAAa9I,EAAMsI,GAGvB,UAFOI,EAAWJ,GAEbQ,GAA6B,KAAfA,EAAnB,CAIA,IAAIT,GAAQlC,EAEZ,GAAI4C,YAASD,GAAa,CACxB,IAAIE,EAEAC,EAAkBZ,EAAO,IAAM,IAAMC,EAAW,IAChDY,EAAWd,EAAmBC,EAAMC,EAAUQ,EAAW1B,MAC7DwB,EAAW7F,KAAKoG,YAAgBC,MAAYJ,EAAc,CAAC,GAAeE,GAAYJ,EAAW1B,MAA4B,KAApB0B,EAAW1B,KAAa4B,EAAY,QAAUC,EAAkBH,EAAWzB,OAASyB,EAAWzB,OAA8B,IAArByB,EAAWzB,MAAa2B,EAAY,SAAWC,EAAkBH,EAAWxB,QAAUwB,EAAWxB,QAAgC,IAAtBwB,EAAWxB,OAAc0B,IAAejB,GACtW,KAAO,CACL,IAAIsB,EAAYjB,EAAmBC,EAAMC,EAAUQ,GAEnDF,EAAW7F,KAAKsG,EAClB,CAdA,CAeF,IAEKT,EAAWzD,QACdyD,EAAW7F,KAAK,OAGlB,IAAIuG,EAAUH,YAAgBC,IAAWpG,EAAW4F,GAAab,GACjE,OAAoBwB,IAAMC,cAAcf,EAAKgB,YAAS,CAAC,EAAGf,EAAY,CACpE1F,UAAWsG,IAEf,EAEAd,EAAIjB,UAAYA,EAChBiB,EAAIL,aAAeA,EACJK,K,mJC8DAkB,IA/HK,SAAH,GAAmD,IAA7ChJ,EAAQ,EAARA,SAAUiJ,EAAS,EAATA,UAAW7F,EAAK,EAALA,MAAM8F,EAAU,EAAVA,WAC9C,EAAwBxJ,oBAAS,GAAM,mBAAhCyJ,EAAI,KAAEC,EAAO,KACpB/H,QAAQC,IAAItB,GACZ,MAAsCN,mBAAU,IAAG,mBAA5C2J,EAAW,KAAEC,EAAc,KAClC,EAA8B5J,mBAAS,IAAG,mBAAnC6J,EAAO,KAAEC,EAAU,KAK1B9I,qBAAU,WACJV,IACFsJ,GAAuB,OAARtJ,QAAQ,IAARA,OAAQ,EAARA,EAAUyJ,eAAgB,IACzCD,EAAmB,OAARxJ,QAAQ,IAARA,OAAQ,EAARA,EAAUuJ,UAGrBlI,QAAQC,IAAI+H,EAAYE,EAAQ,aAEhCH,EAAQH,EAEZ,GAAG,CAACA,IA4CJ,OACI,cAAC,IAAM,CACHS,QAAS,kBAAOtG,GAAM,GAAQgG,GAAQ,EAAM,EAC5CD,KAAMA,EAAK,SAGX,cAAC,IAAa,CAAC1F,MAAO,CAAEoB,OAAQ,EAAG8E,QAAS,GAAI,SAC5C,qBAAKrH,UAAU,sBAAqB,SAEhC,qBAAKA,UAAU,OAAM,SAErB,sBAAKmB,MAAO,CAAEmG,UAAW,QAAS,UAC1B,cAAC,IAAS,CAACC,KAAG,WACV,eAAC,IAAG,CAAC5C,GAAI,GAAI3E,UAAU,oDAAmD,UACtE,cAAC,IAAK,CAACwH,IAAI,YAAY7C,GAAI,EAAG3E,UAAU,UAAS,SAE7C,iCAAM,eAAY,sBAAMA,UAAU,6BAA4B,SAAC,WAEnE,cAAC,IAAK,CACFqB,KAAK,OACLrB,UAAU,WACV2E,GAAI,GACJjD,SAAU,SAACC,GAAC,OAAGqF,EAAerF,EAAEC,OAAOH,MAAM,EAC7CA,MAAOsF,SAKnB,cAAC,IAAS,CAACQ,KAAG,WAGV,eAAC,IAAG,CAAC5C,GAAI,GAAI3E,UAAU,oDAAmD,UACtE,cAAC,IAAK,CAACwH,IAAI,YAAY7C,GAAI,EAAG3E,UAAU,sBAAqB,SAEzD,+BAAM,eAEV,cAAC,IAAK,CACFqB,KAAK,OAELF,MAAO,CAACsG,OAAO,SACfhG,MAAOwF,EACPvF,SAAW,SAACC,GAAKuF,EAAWvF,EAAEC,OAAOH,MAAM,EAC3CkD,GAAI,UAKhB,sBAAK3E,UAAU,gDAAgDmB,MAAO,CAAEmG,UAAW,OAAQlF,aAAc,QAAS,UAC9G,cAAC,IAAM,CAACP,QAAQ,YAAYC,MAAM,UAAW9B,UAAU,6DAA6DgC,QAtFxH,WAEhB,IAAMvB,EAAchC,KAAKC,MAAML,aAAaC,QAAQ,UACnC,IAAfyI,GAAgC,IAAXE,EAEA,OAAhBxG,GACAiH,YAAcjH,EAAoB,OAAR/C,QAAQ,IAARA,OAAQ,EAARA,EAAUiD,GAAGoG,EAAYE,GAC9CpI,MAAK,SAACC,GACiB,OAAb,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,SACL2H,IACAA,IACAE,GAAQ,GACRE,EAAe,IACfE,EAAW,IAEPpG,GACAA,IAEAjB,sBAAoBkB,QAAQ,iCAEhChC,QAAQC,IAAI,kCAAmCF,IAI/Ce,sBAAoBF,MAAM,iCAElC,IACCD,OAAM,SAACsB,GACJjC,QAAQC,IAAI,gCAAiCgC,EACjD,IAGXnB,sBAAoBF,MAAM,qBAGlC,EAmDyK,SAAC,SAC9I,cAAC,IAAM,CAACkC,QAAQ,YAAYC,MAAM,SAAW9B,UAAU,wDAAyDgC,QAAS,kBAAOlB,GAAM,GAAQgG,GAAQ,EAAM,EAAE,SAAC,wBAa/L,C","file":"static/js/64.885d893a.chunk.js","sourcesContent":["/**\n * User Management Page\n */\nimport React, { useEffect, useState, useRef } from 'react'\nimport { Helmet } from 'react-helmet'\nimport Button from '@material-ui/core/Button'\n\nimport {\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Form,\n  FormGroup,\n  Label,\n  Col\n} from 'reactstrap'\nimport Pagination from \"react-js-pagination\";\n\nimport { useHistory } from 'react-router-dom';\nimport { NotificationManager } from 'react-notifications'\n// delete confirmation dialog\nimport DeleteConfirmationDialog from 'Components/DeleteConfirmationDialog/DeleteConfirmationDialog'\n// update user form\n//  import UpdateUserForm from './UpdateUserForm'\n// page title bar\nimport PageTitleBar from '../../../Components/PageTitleBar/PageTitleBar'\n// intl messages\nimport IntlMessages from '../../../Util/IntlMessages'\n// rct card box\nimport RctCollapsibleCard from '../../../Components/RctCollapsibleCard/RctCollapsibleCard'\n// rct section loader\nimport RctSectionLoader from '../../../Components/RctSectionLoader/RctSectionLoader'\nimport '../../../Assets/css/user.css'\nimport {\n  DeleteDataset,\n  getSearchProjectDatasets,\n  getViewProjectDatasets\n} from '../../../Api/'\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport EditIcon from '@mui/icons-material/Edit';\nimport EditDataset from '../ReuseComponent/EditDataset';\nimport { getFormatDate2 } from 'Constants/DateFormator';\nimport CustomBreadcrumbs from \"../ReuseComponent/CustomBreadcrumbs\";\n\nimport {\n    ViewFiles\n  } from '../../../Api/'\n\nexport default function ViewProject(props) {\n  const history = useHistory();\n const {location}=props\n \n  //  const [users, setUsers] = useState() // use when data is coming from api\n  const [users, setUsers] = useState([])\n  //  const [filteredUsers, setFilteredUsers] = useState() // use when the data is coming fom api\n  const [filteredUsers, setFilteredUsers] = useState([])\n  const [searchText, setSearchText] = useState('');\n  \n\n  const [username, setUsername] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n \n  const [selectedUser, setSelectedUser] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [addNewUserModal, setAddNewUserModal] = useState(false)\n  const [updateNewUserModal, setupdateNewUserModal] = useState(false)\n  const [deleteUserModal, setdeleteUserModal] = useState(false)\n\n  const deleteConfirmationDialog = useRef()\n  const [selected, setSelectedItem] = useState({})\n\n  const [editUser, setEditUser] = useState(null)\n  const [selectedUsers, setSelectedUsers] = useState(0)\n  const [viewDetails, setViewDetails] = useState()\nconst [openEditDataset,setOpenEditDataset] = useState(false)\n\n  const [datasets, setDatasets] = useState([]);\n  const [filteredDatasets,setFilteredDatasets] = useState([])\n  const [activePage, setActivePage] = useState(1)\n  const [totalPageCount, setTotalPageCount] = useState(0);\n  const [datasetFiles, setDatasetFiles] = useState([]);\n  const [filteredDatasetFiles, setFilteredDatasetFiles] = useState([]);\n  const [selectedFiles, setSelectedFiles] = useState([]);\n\n  useEffect(() => {\n    const isLoggedInBool = localStorage.getItem(\"isLoggedIn\")\n    // conditional rendring\n    // if(isLoggedInBool !== \"true\"){\n    //   history.push(\"/login\")\n    //     localStorage.clear();\n    // } else {\n    // getCustomersListData();\n    getDatasetFiles()\n    // }\n  }, [])\n\n  const getDatasetFiles = () => {\n    const authToken = JSON.parse(localStorage.getItem(\"token\"));\n    const datasetId = localStorage?.getItem(\"datasetId\")\n    // const datasetId = 146\n\n    if(authToken !== null){\n        ViewFiles(authToken, datasetId, 1)\n        .then(res=> {\n            console.log(res, \"resss in viewDataset file\")\n            if(res?.status == 200){\n                console.log(res?.data?.results, \"dataaa of filesss in view datasetfile\")\n                const results = res?.data?.results;\n                const updatedResults = results.map(result=> {\n                    return {...result, selectedFile: false}\n                })\n\n                setDatasetFiles(updatedResults)\n                setFilteredDatasetFiles(updatedResults)\n                setTotalPageCount(parseInt(res?.data?.count));\n            }else {\n                console.log('Response from View project Datasets lists api in view project:', res)\n            }\n        })\n        .catch((error)=>{\n            console.log(\"error in viewdataset:\",error)\n            const status = error?.response?.status\n            if(status == 401){\n              NotificationManager.error(\"Something went wrong !\");\n              localStorage.clear();\n              history.push(\"/login\")\n            } else if(status == 500){\n              NotificationManager.error(\"Temporary connectivity issues.\");\n            }\n        })\n    } else {\n      localStorage.clear();\n      history.push(\"/login\")\n    }\n}\n\n\n\n\n\n  const EditModal = (item) => {\n    setSelectedItem(item)\n  \n    setOpenEditDataset(true)\n  }\n\n  const DeletModalOpen = (item) => {\n    setSelectedItem(item)\n    deleteConfirmationDialog.current.open()\n  }\n\n  const Delete_Datset = () => {\n\n\n    const accessToken = JSON.parse(localStorage.getItem('token'))\n    if (accessToken !== null) {\n     \n      DeleteDataset(accessToken, selected?.id,selected?.project_id)\n        .then((res) => {\n          if (res?.status === 200) {\n            deleteConfirmationDialog.current.close()\n\n            NotificationManager.success(\"Datset deleted successfully!\")\n            console.log('Response from dataset  :', res)\n\n          } else {\n\n\n            NotificationManager.error(\"Delete_Datset deleting process unsucess!\")\n          }\n        })\n        .catch((err) => {\n          console.log('Response from err dataset  :', err)\n          NotificationManager.error(\"Delete_Datset deleting process unsucess!\")\n        })\n    }\n  }\n\n\n\n\n\n  const handlePageChange = (pageNumber) => {\n    // console.log(\"pagination\", pageNumber)\n    // if (activePage !== pageNumber) {\n    //   const authToken = JSON.parse(localStorage.getItem('token'))\n    //   const projectId = localStorage?.getItem(\"projId\")\n\n    //   if (authToken !== null) {\n    //     getViewProjectDatasets(authToken, projectId, pageNumber)\n    //       .then((res) => {\n    //         if (res?.status === 200) {\n    //           setDatasets(res?.data?.results);\n    //           setFilteredDatasets(res?.data?.results);\n    //           setTotalPageCount(res?.data?.count);\n    //           console.log('Response from customerlist :', res)\n    //         } else {\n    //           // console.log('Response from customerlist:', res)\n    //         }\n    //       })\n    //       .catch((err) => {\n    //         // console.log('Response from customerlist:', err)\n    //       })\n    //   }\n    //   setActivePage(pageNumber)\n    // }\n  }\n\n\n  // Dataset View\n  const handleView = (dataset) => {\n    console.log(dataset?.id, \"selected dataset ID\")\n    localStorage.setItem(\"datasetId\", dataset?.id);\n    if(location?.state?.breadcrumbData){\n      let path = location?.state?.breadcrumbData[0]\n      if(path?.name == \"Dashboard\"){\n        const breadcrumbData = [\n          { name: 'Dashboard', url: '/app/dashboard/saas' },\n          { name: 'View Project', url: '/app/dashboard/viewProject' },\n          \n        ];\n        history.push(\"/app/dashboard/viewDataset\",{breadcrumbData:breadcrumbData})\n      }else if(path?.name == \"Project\"){\n        const breadcrumbData = [\n          { name: 'Project', url: '/app/dashboard/project' },\n          { name: 'View Project', url: '/app/dashboard/viewProject' },\n          \n        ];\n        history.push(\"/app/dashboard/viewDataset\",{breadcrumbData:breadcrumbData})\n      }\n    }\n  \n  }\n\n  // Dataset create\n  const HandleCreate=()=>{\n    if(location?.state?.breadcrumbData){\n      let path = location?.state?.breadcrumbData[0]\n      if(path?.name == \"Dashboard\"){\n        const breadcrumbData = [\n          { name: 'Dashboard', url: '/app/dashboard/saas' },\n          { name: 'View Project', url: '/app/dashboard/viewProject' },\n          \n        ];\n        history.push(\"/app/dashboard/createDataset\",{breadcrumbData:breadcrumbData})\n      }else if(path?.name == \"Project\"){\n        const breadcrumbData = [\n          { name: 'Project', url: '/app/dashboard/project' },\n          { name: 'View Project', url: '/app/dashboard/viewProject' },\n          \n        ];\n        history.push(\"/app/dashboard/createDataset\",{breadcrumbData:breadcrumbData})\n      }\n    }\n       \n  }\n\n  const getSearchedCustomerData = () => {\n    const accessToken = JSON.parse(localStorage.getItem('token'));\n    const projectId = localStorage?.getItem(\"projId\")\n    if (accessToken !== null) {\n       getSearchProjectDatasets(accessToken,projectId, searchText)\n        .then((res) => {\n          if (res?.status === 200 && res?.data?.results.length>0) {\n            setFilteredDatasets(res?.data?.results);\n            setSearchText('')\n            // console.log('Response from customerlist :', res)\n          } else {\n            // console.log('Response from customerlist:', res)\n            setFilteredDatasets(datasets);\n            setSearchText('');\n            NotificationManager.error(\"No dataset found!\")\n          }\n        })\n        .catch((err) => {\n          // console.log('Response from customerlist:', err)\n        })\n    }\n  }\nconst NavigateCompletTask=()=>{\n  history.push(\"/app/dashboard/downloadFile\")\n}\n  return (\n    <div className=\"user-management\">\n      <Helmet>\n        <title>Automaton | Task List</title>\n        <meta name=\"description\" content=\"Automaton Widgets\" />\n      </Helmet>\n      {/* <PageTitleBar\n        title={<IntlMessages id=\"sidebar.viewProject\" />}\n        match={props.match}\n      /> */}\n \n      <CustomBreadcrumbs    currentPage={\"Task List\"} data={location?.state?.breadcrumbData} />\n\n\n                <DeleteConfirmationDialog title=\"Are You Sure Want To Delete?\"\n             message=\"This will delete your Dataset permanently.\"\n             onConfirm={() => Delete_Datset()}\n             ref={deleteConfirmationDialog} />\n      <RctCollapsibleCard>\n     \n        <div className=\"table-responsive\">\n          <div className=\"d-flex py-20 px-10 border-bottom\" style={{ justifyContent: 'space-between' }}>\n            <div className='search-row'>\n              <input type=\"text\" placeholder='Search' className='search-input py-2' style={{ border: \"none\", borderBottom: \"1px solid black\" }} value={searchText} onChange={(e) => setSearchText(e.target.value)} />\n              <Button variant=\"contained\" color=\"primary\" className=\"text-white mx-5\" style={{ cursor: \"pointer\" }} \n               onClick={getSearchedCustomerData}\n              >Search</Button>\n            </div>\n\n            <Button  \n             onClick={NavigateCompletTask}\n            variant=\"contained\" color=\"primary\" className=\"text-white mx-5\" style={{ cursor: \"pointer\" }} >Completed Task</Button>\n\n          </div>\n\n          <div className='bg-danger p-2 d-flex justify-content-center align-items-center headingContainer dark-primary' style={{marginBottom:\"50px\"}}>\n            <ul className='d-flex justify-content-center align-items-center globalFontFamily ' style={{listStyle: \"none\", gap: \"30px\", margin:\"0px\"}}>\n                <li>0 Complete</li>\n                <li>1 In Progress</li>\n                <li>0 Failed</li>\n                <li>3 Pending</li>\n            </ul>\n          </div>\n          <table className=\"table table-middle table-hover mb-0\">\n            <thead>\n              <tr>\n                <th></th>\n                <th>Name</th>\n                <th>Status</th>\n                <th>Images</th>\n                <th>Plan</th>\n                <th>Date Created</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n\n            {/****** mine filtered Table body, without ternary conditional value  *****/}\n            <tbody>\n              {/* {filteredDatasets &&\n                filteredDatasets.map((dataset, i, data) => {\n                  // let active = user?.is_active\n                  let created_Date = getFormatDate2((dataset?.date_created))\n                  return (\n\n                    <tr key={i}>\n                      <td></td>\n                      <td>Task-1</td>\n                      <td>Pending</td>\n                      <td>1</td>\n                      <td className=\"list-action d-flex \">Plaaannn</td>\n                      <td>27 March 2023</td>\n                    </tr>\n                  )\n                })\n              } */}\n\n                    <tr className='globalFontFamily'>\n                      <td></td>\n                      <td>Task-1</td>\n                      <td>Pending</td>\n                      <td>1</td>\n                      <td className=\"list-action d-flex \">Plaaannn</td>\n                      <td>27 March 2023</td>\n                      <td>View</td>\n                    </tr>\n\n            </tbody>\n\n          </table>\n          {filteredDatasetFiles.length == 0 && <center style={{ color: \"black\" }}>Data not available </center>}\n          {\n            datasetFiles?.length > 0 &&\n            <div className='paginationDiv'> \n              <Pagination\n                activePage={activePage}\n                itemsCountPerPage={6}\n                pageRangeDisplayed={5}\n                onChange={(e) => handlePageChange(e)}\n                itemClass=\"page-item\"\n                linkClass=\"page-link\"\n                hideFirstLastPages={true}\n                totalItemsCount={totalPageCount}\n              />\n            </div>\n          }\n        </div>\n        {loading && <RctSectionLoader />}\n      </RctCollapsibleCard>\n\n      {/* <EditDataset selected={selected} Modalopen={openEditDataset} close={()=>setOpenEditDataset(false)} reloadlist={getViewProjectData}/>       */}\n    </div>\n  )\n}\n","import React, { useEffect,useState } from 'react';\nimport { useHistory } from 'react-router';\n\n\nconst CustomBreadcrumbs = ({ currentPage, data =[] ,props}) => {\n\nconst [navData,setNavData]=useState(data)\n\n\nuseEffect(()=>{\n\n},[])\n\n  const history = useHistory();\n      console.log(data,\"daaata..\")\n  \n  const HandleNavigate = async (item,index)=>{\n    // const Data = [...navData]\n    let myarray=[]\n    // console.log(index,\"Data=\",Data)\n\n\n     for (let i = 0; i < index; i++) {\n       \n      myarray.push(data[i])\n     }\nconsole.log(myarray,\"myarray\")\n    \n    history.push(item.url,{breadcrumbData:myarray})\n  }\n\n  return (\n    <div className=\"page-title d-flex  align-items-center\">\n      {data != undefined  && data.length > 0 &&data.map((item, index) => (\n        <div key={index} className=\"page-title-wrap  d-flex  align-items-center mr-1\" style={{cursor:\"pointer\"}}>\n          \n        <i className=\"ti-angle-left text-dark  custombredcrum-icon\"></i> <span onClick={()=>HandleNavigate(item,index)} className=\"globalFontFamily custombredcrum-heding\">{item.name}</span>\n         \n        </div>\n      ))}\n      <div className=\"page-title-wrap   d-flex  align-items-center text-white m-0\"  style={{cursor:\"pointer\"}}><i className=\"ti-angle-left  text-white custombredcrum-icon\"></i><span className=\"globalFontFamily custombredcrum-heding\">{currentPage}</span></div>\n    </div>\n  );\n};\n\nexport default CustomBreadcrumbs;\n","// Get Formatted Time\nexport const getFormatTime=(date)=>{\n    let Sort= date.toString().replace(/T/, ' ').replace(/\\..+/, '').split(\" \")   \n   var time =Sort[1].toString()\n  \n      function tConvert (time) {\n       // Check correct time format and split into components\n          time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n       if (time.length > 1) { \n         time = time.slice (1);\n        time[5] = +time[0] < 12 ? 'AM' : 'PM'; \n         time[0] = +time[0] % 12 || 12; \n           time.splice(3, 1,\" \"); \n       }\n         return time.join (''); \n      }\n       return tConvert(time)\n  } \n\n  // Get Formatted Date\n  export const getFormatDate=(date)=>{\n      if(date){\n        let Sort= date.toString().replace(/T/, ' ').replace(/\\..+/, '').split(\" \")   \n        const months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n        const d = new Date(Sort[0]);\n         let month = months[d.getMonth()];\n         let year= d.getFullYear();\n         let date2=d.getDate()\n        return date2+\" \"+month+\" \"+year\n      }else{\n          return \"\"\n      }\n  \n } \n \n export const getFormatDate2=(date)=>{\n    if(date){\n      let Sort= date.toString().replace(/T/, ' ').replace(/\\..+/, '').split(\" \")   \n      return Sort[0]\n    \n    }else{\n        return \"\"\n    }\n\n} \n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"cssModule\", \"widths\", \"tag\"];\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType, isObject } from './utils';\nvar colWidths = ['xs', 'sm', 'md', 'lg', 'xl'];\nvar stringOrNumberProp = PropTypes.oneOfType([PropTypes.number, PropTypes.string]);\nvar columnProps = PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string, PropTypes.shape({\n  size: PropTypes.oneOfType([PropTypes.bool, PropTypes.number, PropTypes.string]),\n  order: stringOrNumberProp,\n  offset: stringOrNumberProp\n})]);\nvar propTypes = {\n  tag: tagPropType,\n  xs: columnProps,\n  sm: columnProps,\n  md: columnProps,\n  lg: columnProps,\n  xl: columnProps,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  widths: PropTypes.array\n};\nvar defaultProps = {\n  tag: 'div',\n  widths: colWidths\n};\n\nvar getColumnSizeClass = function getColumnSizeClass(isXs, colWidth, colSize) {\n  if (colSize === true || colSize === '') {\n    return isXs ? 'col' : \"col-\" + colWidth;\n  } else if (colSize === 'auto') {\n    return isXs ? 'col-auto' : \"col-\" + colWidth + \"-auto\";\n  }\n\n  return isXs ? \"col-\" + colSize : \"col-\" + colWidth + \"-\" + colSize;\n};\n\nvar Col = function Col(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      widths = props.widths,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var colClasses = [];\n  widths.forEach(function (colWidth, i) {\n    var columnProp = props[colWidth];\n    delete attributes[colWidth];\n\n    if (!columnProp && columnProp !== '') {\n      return;\n    }\n\n    var isXs = !i;\n\n    if (isObject(columnProp)) {\n      var _classNames;\n\n      var colSizeInterfix = isXs ? '-' : \"-\" + colWidth + \"-\";\n      var colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);\n      colClasses.push(mapToCssModules(classNames((_classNames = {}, _classNames[colClass] = columnProp.size || columnProp.size === '', _classNames[\"order\" + colSizeInterfix + columnProp.order] = columnProp.order || columnProp.order === 0, _classNames[\"offset\" + colSizeInterfix + columnProp.offset] = columnProp.offset || columnProp.offset === 0, _classNames)), cssModule));\n    } else {\n      var _colClass = getColumnSizeClass(isXs, colWidth, columnProp);\n\n      colClasses.push(_colClass);\n    }\n  });\n\n  if (!colClasses.length) {\n    colClasses.push('col');\n  }\n\n  var classes = mapToCssModules(classNames(className, colClasses), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCol.propTypes = propTypes;\nCol.defaultProps = defaultProps;\nexport default Col;","import React, { useEffect, useState } from 'react'\nimport {\n    Progress, Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    FormText,\n    Col,\n    FormFeedback\n} from 'reactstrap';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { Avatar } from '@material-ui/core';\nimport { BASE_URL } from 'Api/APIConst';\nimport { NotificationManager } from 'react-notifications'\nimport { EditProjectDetails, UpadatDataset } from 'Api';\n\nconst EditDataset = ({ selected, Modalopen, close,reloadlist }) => {\n    const [open, setOpen] = useState(false)\n    console.log(selected)\n    const [datasetName, setDatasetName] = useState( \"\")\n    const [comment, setComment] = useState(\"\")\n    \n    \n\n\n    useEffect(() => {\n       if(selected){\n        setDatasetName(selected?.dataset_name || \"\")\n        setComment(selected?.comment)\n       }\n\n        console.log(datasetName,comment,\">>>>>.>>>\")\n        //  setImage(item?.project_image)\n        setOpen(Modalopen)\n\n    }, [Modalopen])\n\n\n\n\n   \n    const SaveEditDetails = () => {\n      \n            const accessToken = JSON.parse(localStorage.getItem('token'))\n           if(datasetName != \"\" || comment != \"\"){\n\n               if (accessToken !== null) {\n                   UpadatDataset(accessToken,selected?.id,datasetName,comment)\n                       .then((res) => {\n                           if (res?.status === 200) {\n                            if(reloadlist){\n                               reloadlist()\n                               setOpen(false)\n                               setDatasetName(\"\")\n                               setComment(\"\")\n                              \n                                if(close){\n                                   close()\n                                   }\n                                   NotificationManager.success(\" Datset updated succesfully!\") \n                            }\n                               console.log('Response from update dataset  :', res)\n                           } else {\n                               // console.log('Response from customerlist:', res)\n   \n                               NotificationManager.error(\"Dataset details update failed!\")\n                           }\n                       })\n                       .catch((err) => {\n                           console.log('Response from Upadat dataset:', err)\n                       })\n               }\n           }else{\n            NotificationManager.error(\"All field is empty\")\n           }\n\n    }\n\n\n    return (\n        <Dialog\n            onClose={() => (close(false), setOpen(false))}\n            open={open}\n\n        >\n            <DialogContent style={{ margin: 0, padding: 0 }}>\n                <div className=\"user-profile-widget\">\n                \n                    <div className=\"p-20\">\n                    \n                    <div style={{ marginTop: \"30px\" }}>\n                            <FormGroup row >\n                                <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                                    <Label for=\"firstName\" sm={3} className=\"d-flex \">\n                                      \n                                        <span>Dataset Name<span className=\"text-danger madatory-field\">*</span></span>\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"input-md\"\n                                        sm={10}\n                                        onChange={(e)=>setDatasetName(e.target.value)}\n                                        value={datasetName}\n                                    />\n                                </Col>\n\n                            </FormGroup>\n                            <FormGroup row >\n\n\n                                <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                                    <Label for=\"firstName\" sm={3} className=\"d-flex primary-dark\">\n                                       \n                                        <span> Comment</span>\n                                    </Label>\n                                    <Input\n                                        type=\"text\"\n                                        // className=\"input-lg\"\n                                        style={{height:\"100px\"}}\n                                        value={comment}\n                                        onChange= {(e)=>{setComment(e.target.value)}}\n                                        sm={10}\n                                    />\n                                </Col>\n\n                            </FormGroup>\n                            <div className=\"d-flex align-items-center justify-content-end\" style={{ marginTop: '30px', marginBottom: \"30px\" }}>\n                                <Button variant=\"contained\" color=\"primary\"  className=\"mx-2 d-flex justify-content-center align-items-center px-3\" onClick={SaveEditDetails}>Save</Button>\n                                <Button variant=\"contained\" color=\"danger\"   className=\"mx-2 d-flex justify-content-center align-items-center\"  onClick={() => (close(false), setOpen(false))}>Cancel</Button>\n                               \n                                \n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default EditDataset\n"],"sourceRoot":""}