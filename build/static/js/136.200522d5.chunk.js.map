{"version":3,"sources":["Components/Widgets/NewEmails.js"],"names":["withRouter","props","useState","sectionReload","setSectionReload","newEmails","setNewEmails","openConfirmationAlert","setOpenConfirmationAlert","selectedDeletedEmail","setSelectedDeletedEmail","snackbar","setSnackbar","snackbarMessage","setSnackbarMessage","selectedEmail","setSelectedEmail","viewEmailDialog","setViewEmailDialog","useEffect","api","get","then","response","data","catch","error","console","log","handleCloseConfirmationAlert","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","map","email","key","sender_avatar","sender_name","charAt","object","src","alt","width","height","body","from","subject","message","replyTextBox","addonType","variant","color","onClick","indexOfEmail","indexOf","update","$set","setTimeout","replyEmail","id","size","onViewEmal","onDeleteEmail","showReplyTextBox","open","onClose","emails","deletedEmailIndex","splice","deleteEmail","anchorOrigin","vertical","horizontal","autoHideDuration","snackbarcontentprops"],"mappings":"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","file":"static/js/136.200522d5.chunk.js","sourcesContent":["/**\n * New Emails Widget\n */\nimport React, { useEffect, Fragment, useState } from 'react';\nimport { Media } from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { InputGroup, InputGroupAddon, Input } from 'reactstrap';\nimport update from 'react-addons-update';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Avatar from '@material-ui/core/Avatar';\nimport { withRouter } from 'react-router-dom';\n// api\nimport api from 'Api';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\nimport { Fab } from '@material-ui/core';\n\nfunction NewEmails(props) {\n   const [sectionReload, setSectionReload] = useState(false);\n   const [newEmails, setNewEmails] = useState(null);\n   const [openConfirmationAlert, setOpenConfirmationAlert] = useState(false);\n   const [selectedDeletedEmail, setSelectedDeletedEmail] = useState(null);\n   const [snackbar, setSnackbar] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('');\n   const [selectedEmail, setSelectedEmail] = useState(null);\n   const [viewEmailDialog, setViewEmailDialog] = useState(false);\n\n   useEffect(() => {\n      api.get('newEmails.js')\n         .then((response) => {\n            setNewEmails(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   },[])\n   \n\n   // on delete email open confirmation\n   const onDeleteEmail = (email) => {\n      setOpenConfirmationAlert(true);\n      setSelectedDeletedEmail(email);\n   }\n\n   // close confirmation dailog\n   const handleCloseConfirmationAlert = () => {\n      setOpenConfirmationAlert(false);\n      setViewEmailDialog(false);\n   }\n\n   // delete email if confirmation true\n   const deleteEmail = () => {\n      let emails = newEmails;\n      let deletedEmailIndex = emails.indexOf(selectedDeletedEmail);\n      emails.splice(deletedEmailIndex, 1);\n      setTimeout(() => {\n         setSectionReload(false);\n         setNewEmails(emails);\n         setOpenConfirmationAlert(false);\n         setSnackbar(true);\n         setSnackbarMessage('Email Deleted Successfully!');\n      }, 1500);\n   }\n\n   // show reply text box\n   const showReplyTextBox = (email) =>  {\n      let indexOfEmail = newEmails.indexOf(email);\n      setNewEmails(update(newEmails,\n         {\n            [indexOfEmail]: {\n               replyTextBox: { $set: true }\n            }\n         }\n      ));\n   }\n\n   // reply email\n   const replyEmail = (email) => {\n      let indexOfEmail = newEmails.indexOf(email);\n      setSectionReload(true);\n      setNewEmails(update(newEmails,\n         {\n            [indexOfEmail]: {\n               replyTextBox: { $set: false }\n            }\n         }\n      ));\n      setTimeout(() => {\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Reply Sent Successfully!');\n      }, 1500);\n   }\n\n   /**\n    * On View Email\n    */\n   const onViewEmal = (email) => {\n      setSelectedEmail(email);\n      setViewEmailDialog(true);\n   }\n\n\n   return (\n      <Fragment>\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={400} autoHide>\n            <ul className=\"new-mail mb-0 list-unstyled\">\n               {newEmails && newEmails.map((email, key) => (\n                  <li key={key}>\n                     <div className=\"d-flex justify-content-between\">\n                        <Media className=\"mb-10\">\n                           {email.sender_avatar === '' ?\n                              <Avatar className=\"mr-15\">{email.sender_name.charAt(0)}</Avatar>\n                              : <Media object src={email.sender_avatar} alt=\"User Profile 1\" className=\"rounded-circle mr-15\" width=\"40\" height=\"40\" />\n                           }\n                           <Media body>\n                              <h5 className=\"m-0 pt-5 fs-14\">{email.sender_name}</h5>\n                              <span className=\"fs-12 align-self-center\">{email.from}</span>\n                           </Media>\n                        </Media>\n                        <span className=\"small align-self-center\">19 Mar 2017</span>\n                     </div>\n                     <div className=\"d-flex justify-content-between\">\n                        <div className=\"text-justify\">\n                           <p className=\"subject\">{email.subject}</p>\n                           <p className=\"message\">{email.message}</p>\n                           {email.replyTextBox &&\n                              <div className=\"task-foot d-flex justify-content-between\">\n                                 <InputGroup>\n                                    <Input />\n                                    <InputGroupAddon addonType=\"append\">\n                                       <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => replyEmail(email)}>\n                                          <IntlMessages id=\"button.reply\" />\n                                       </Button>\n                                    </InputGroupAddon>\n                                 </InputGroup>\n                              </div>\n                           }\n                        </div>\n                        <div className=\"hover-action text-right w-25 align-self-center\">\n                           <Fab variant=\"round\" size=\"small\" color=\"primary\" className=\"text-white mr-5 mb-5\"\n                              onClick={() => onViewEmal(email)}\n                           >\n                              <i className=\"zmdi zmdi-eye\"></i>\n                           </Fab>\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white mr-5 mb-5\"\n                              onClick={() => onDeleteEmail(email)}\n                           >\n                              <i className=\"zmdi zmdi-delete\"></i>\n                           </Fab>\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-success text-white mr-5 mb-5\"\n                              onClick={() => showReplyTextBox(email)}\n                           >\n                              <i className=\"zmdi zmdi-mail-reply\"></i>\n                           </Fab>\n                        </div>\n                     </div>\n                  </li>\n               ))}\n            </ul>\n         </Scrollbars>\n         <Dialog\n            open={openConfirmationAlert}\n            onClose={handleCloseConfirmationAlert}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n         >\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure Want To Delete?\"}</DialogTitle>\n            <DialogContent>\n               <DialogContentText id=\"alert-dialog-description\">\n                  This will delete the email permanently from your emails.\n         </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n               <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={handleCloseConfirmationAlert}>\n                  <IntlMessages id=\"button.cancel\" />\n               </Button>\n               <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => deleteEmail()}>\n                  <IntlMessages id=\"button.delete\" />\n               </Button>\n            </DialogActions>\n         </Dialog>\n         <Dialog\n            open={viewEmailDialog}\n            onClose={handleCloseConfirmationAlert}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n         >\n            <DialogContent>\n               {selectedEmail !== null &&\n                  <div>\n                     <div className=\"d-flex justify-content-between\">\n                        <Media className=\"mb-10\">\n                           {selectedEmail.sender_avatar === '' ?\n                              <Avatar className=\"mr-15\">{selectedEmail.sender_name.charAt(0)}</Avatar>\n                              : <Media object src={selectedEmail.sender_avatar} alt=\"User Profile 1\" className=\"rounded-circle mr-15\" width=\"40\" height=\"40\" />\n                           }\n                           <Media body>\n                              <h5 className=\"m-0 pt-5 fs-14\">{selectedEmail.sender_name}</h5>\n                              <span className=\"fs-12 align-self-center\">{selectedEmail.from}</span>\n                           </Media>\n                        </Media>\n                        <span className=\"small align-self-center\">19 Mar 2017</span>\n                     </div>\n                     <div className=\"d-flex justify-content-between\">\n                        <div className=\"text-justify\">\n                           <p className=\"subject\">{selectedEmail.subject}</p>\n                           <p className=\"message\">{selectedEmail.message}</p>\n                        </div>\n                     </div>\n                  </div>\n               }\n            </DialogContent>\n         </Dialog>\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            snackbarcontentprops={{\n               'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </Fragment>\n   );\n}\n\nexport default withRouter(NewEmails);\n"],"sourceRoot":""}