{"version":3,"sources":["Components/Widgets/ActivityBoard.js"],"names":["ActivityBoard","useState","activityData","setActivityData","sectionReload","setSectionReload","assetsData","setAssetsData","useEffect","getAssetstData","getChecklistData","api","get","then","response","data","catch","error","handleChange","value","task","selectedTaskIndex","indexOf","newState","update","completed","$set","setTimeout","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","id","map","key","src","imageUrl","alt","href","onClick","e","preventDefault","color","button","classnames","checked","onChange","target","title"],"mappings":"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","file":"static/js/137.6f89d931.chunk.js","sourcesContent":["/**\n * Activity Board\n */\nimport React, { useState, useEffect } from 'react'\nimport { Progress } from 'reactstrap';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport classnames from 'classnames';\nimport update from 'react-addons-update';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n// api\nimport api from 'Api';\n// card component\nimport { RctCardFooter } from 'Components/RctCard';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n\nfunction ActivityBoard() {\n   const [activityData, setActivityData] = useState(null);\n   const [sectionReload, setSectionReload] = useState(false)\n   const [assetsData, setAssetsData] = useState(null)\n\n   useEffect(() => {\n      getAssetstData();\n      getChecklistData();\n   },[])\n\n\t// assets Data\n\n\tconst getAssetstData = () => {\n      setSectionReload(true)\n\t\tapi.get('galleryImages.js')\n\t\t\t.then((response) => {\n            setAssetsData(response.data);\n            setSectionReload(false)\n\t\t\t}).catch(error => {\n            setAssetsData(null);\n            setSectionReload(false)\n\t\t\t})\n\t}\n\n\t// Checklist Data\n\n\tconst getChecklistData = () => {\n      setSectionReload(true)\n\t\tapi.get('ActivityBoardData.js')\n\t\t\t.then((response) => {\n            setActivityData(response.data);\n            setSectionReload(false)\n\t\t\t}).catch(error => {\n            setActivityData(null);\n            setSectionReload(false)\n\t\t\t})\n\t}\n\n\t// on handle change task\n\tconst handleChange = (value, task) => {\n\t\tlet selectedTaskIndex = activityData.indexOf(task);\n      let newState = update(activityData, {\n\t\t\t\t[selectedTaskIndex]: {\n\t\t\t\t\tcompleted: { $set: value }\n\t\t\t}\n      });\n      setSectionReload(true)\n\t\tsetTimeout(() => {\n         setActivityData(newState);\n         setSectionReload(false)\n\t\t}, 1500);\n\t}\n\n\n   return (\n      <div className=\"activity-board-wrapper\">\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={600} autoHide>\n            <ul className=\"mb-0 list-unstyled\">\n               <li className=\"border-bottom\">\n                  <div className=\"activity-heading d-flex p-4 border-bottom\">\n                     <h3 className=\"mb-0\">Automaton Redesign</h3>\n                  </div>\n                  <div className=\"activity-description p-4\">\n                     <h4 className=\"mb-4\"><IntlMessages id=\"widgets.description\" /></h4>\n                     <div className=\"comment-box mb-4\">\n                        <p className=\"small-text\">\n                           Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                           tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n                           quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n                        </p>\n                     </div>\n                     <h4 className=\"mb-4\">Automaton Redesign Assets</h4>\n                     <ul className=\"mb-0 list-inline attachment-wrap\">\n                        {assetsData && assetsData.map((data, key) => (\n                           <li key={key} className=\"list-inline-item overlay-wrap overflow-hidden rounded\">\n                              <img src={data.imageUrl} className=\"size-120 rounded img-fluid\" alt=\"img\" />\n                              <div className=\"overlay-content\">\n                                 <a href=\"!#\" onClick={e => e.preventDefault()} className=\"d-flex align-items-center justify-content-center h-100 font-2x text-white\">\n                                    <i className=\"zmdi zmdi-download\"></i>\n                                 </a>\n                              </div>\n                           </li>\n                        ))}\n                     </ul>\n                  </div>\n               </li>\n               <li>\n                  <div className=\"activity-heading d-flex p-4 border-bottom\">\n                     <h3 className=\"mb-0\"><IntlMessages id=\"widgets.checklist\" /></h3>\n                  </div>\n                  <div className=\"p-4\">\n                     <Progress color=\"primary\" className=\"mb-3\" value=\"80\">80% Completed</Progress>\n                     <List className=\"p-0\">\n                        {activityData && activityData.map((task, key) => (\n                           <ListItem key={key} onClick={(e) => handleChange(!task.completed, task)} button className=\"p-0\">\n                              <div className={classnames('d-flex  align-items-center', { 'strike': task.completed })}>\n                                 <Checkbox\n                                    color=\"primary\"\n                                    checked={task.completed}\n                                    className=\"mr-20 \"\n                                    onChange={(e) => handleChange(e.target.checked, task)}\n                                 />\n                                 <p className=\"mb-0\">{task.title}</p>\n                              </div>\n                           </ListItem>\n                        ))}\n                     </List>\n                  </div>\n               </li>\n            </ul>\n         </Scrollbars>\n         <RctCardFooter className=\"bg-light\">\n            <span className=\"fs-12 text-base\">\n               <i className=\"mr-15 zmdi zmdi-refresh\"></i>\n               <IntlMessages id=\"widgets.updated10Minago\" />\n            </span>\n         </RctCardFooter>\n      </div>\n   )\n}\n\nexport default ActivityBoard;"],"sourceRoot":""}