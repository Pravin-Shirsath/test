{"version":3,"sources":["Components/Widgets/NewCustomers.js","Components/DeleteConfirmationDialog/DeleteConfirmationDialog.js"],"names":["NewCustomers","props","deleteConfirmationDialogRef","useRef","useState","sectionReload","setSectionReload","newCustomers","setNewCustomers","selectedDeletedCustomer","setSelectedDeletedCustomer","editCustomerModal","setEditCustomerModal","editCustomer","setEditCustomer","snackbar","setSnackbar","successMessage","setSuccessMessage","addNewCustomerForm","setAddNewCustomerForm","customer_email","customer_name","id","photo_url","addNewCustomerDetails","setAddNewCustomerDetails","useEffect","getNewCustomers","api","get","then","response","data","catch","error","toggleEditCustomerModal","onChangeCustomerDetails","key","value","onChangeCustomerAddNewForm","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","map","customer","charAt","src","alt","width","height","type","onClick","onEditCustomer","current","open","onDeleteCustomer","variant","color","ref","title","message","onConfirm","close","customers","index","indexOf","setTimeout","splice","deleteCustomer","isOpen","toggle","for","name","onChange","e","target","defaultValue","customer_id","readOnly","newCustomer","Date","newAllCustomers","push","onSubmitAddNewCustomerForm","indexOfCustomer","i","length","update","$set","onSubmitCustomerEditDetailForm","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","DeleteConfirmationDialog","state","this","setState","maxWidth","autoFocus","Component"],"mappings":"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","file":"static/js/106.07cfb436.chunk.js","sourcesContent":["/**\n * New Customers Widget\n */\nimport React, { useState, Fragment, useEffect, useRef } from 'react';\nimport update from 'react-addons-update';\nimport {\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Label,\n   Input\n} from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Scrollbars } from 'react-custom-scrollbars';\n// api\nimport api from 'Api';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\nimport DeleteConfirmationDialog from 'Components/DeleteConfirmationDialog/DeleteConfirmationDialog';\n\nfunction NewCustomers(props) {\n   const deleteConfirmationDialogRef = useRef();\n   const [sectionReload, setSectionReload] = useState(false);\n   const [newCustomers, setNewCustomers] = useState(null);\n   const [selectedDeletedCustomer, setSelectedDeletedCustomer] = useState(null);\n   const [editCustomerModal, setEditCustomerModal] = useState(false);\n   const [editCustomer, setEditCustomer] = useState(null);\n   const [snackbar, setSnackbar] = useState(false);\n   const [successMessage, setSuccessMessage] = useState('');\n   const [addNewCustomerForm, setAddNewCustomerForm] = useState(false);\n   const [addNewCustomerDetails, setAddNewCustomerDetails] = useState({\n      customer_email: '',\n      customer_name: '',\n      id: '',\n      photo_url: ''\n   });\n\n   useEffect(() => {\n      getNewCustomers();\n   },[])\n\n   // get new customers\n   const getNewCustomers = () => {\n      setSectionReload(true);\n      api.get('newCustomers.js')\n         .then((response) => {\n            setNewCustomers(response.data);\n            setSectionReload(false);\n         })\n         .catch(error => {\n            setNewCustomers(null);\n            setSectionReload(false);\n         })\n   }\n\n   // on delete customer\n   const onDeleteCustomer = (customer) =>  {\n      deleteConfirmationDialogRef.current.open();\n      setSelectedDeletedCustomer(customer);\n   }\n\n   // delete customer\n   const deleteCustomer = () => {\n      deleteConfirmationDialogRef.current.close();\n      setSectionReload(true)\n      let customers = newCustomers;\n      let index = customers.indexOf(selectedDeletedCustomer);\n      setTimeout(() => {\n         customers.splice(index, 1);\n         setNewCustomers(customers);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSuccessMessage('Customer Deleted Successfully');\n      }, 1500);\n   }\n\n   // edit customer\n   const onEditCustomer = (customer) => {\n      setEditCustomerModal(true);\n      setEditCustomer(customer);\n      setAddNewCustomerForm(false);\n   }\n\n   // toggle edit customer modal\n   const toggleEditCustomerModal = () => {\n      setEditCustomerModal(!editCustomerModal);\n   }\n\n   // submit customer edit form\n   const onSubmitCustomerEditDetailForm = () => {\n      if (editCustomer.customer_name !== '' && editCustomer.customer_email !== ''){\n         setEditCustomer(false);\n         setSectionReload(true);\n         let indexOfCustomer;\n         for (let i = 0; i < newCustomers.length; i++) {\n            const customer = newCustomers[i];\n            if (customer.customer_id === editCustomer.customer_id) {\n               indexOfCustomer = i;\n            }\n         }\n         setTimeout(() => {\n            setSectionReload(false);\n            setSnackbar(true);\n            setEditCustomerModal(false);\n            setSuccessMessage('Customer Updated Success');\n            setNewCustomers(update(newCustomers,\n               {\n                  [indexOfCustomer]: { $set: editCustomer }\n               }\n            ))\n         }, 1500);\n      }\n   }\n\n   // on change customer details\n   const onChangeCustomerDetails = (key, value) => {\n      setEditCustomer({\n         ...editCustomer,\n         [key]: value\n      })\n   }\n\n   // add new customer\n   const addNewCustomer = () => {\n      setEditCustomerModal(true);\n      setAddNewCustomerForm(true);\n      setEditCustomer(null);\n      setAddNewCustomerDetails({\n         customer_email: '',\n         customer_name: '',\n         id: '',\n         photo_url: ''\n      });\n   }\n\n   // on change customer add new form value\n   const onChangeCustomerAddNewForm = (key, value) => {\n      setAddNewCustomerDetails({\n         ...addNewCustomerDetails,\n         [key]: value\n      })\n   }\n\n   // on submit add new customer form\n   const onSubmitAddNewCustomerForm = () =>  {\n      if (addNewCustomerDetails.customer_name !== '' && addNewCustomerDetails.customer_email !== ''){\n         setEditCustomerModal(false);\n         setSectionReload(true);\n        \n         let newCustomer = addNewCustomerDetails;\n            newCustomer.id = new Date();\n            newCustomer.photo_url = '';\n         let newAllCustomers = newCustomers;\n         setTimeout(() => {\n            newAllCustomers.push(newCustomer);\n            setNewCustomers(newAllCustomers);\n            setSectionReload(false);\n            setSnackbar(true);\n            setSuccessMessage('Customer Added Successfully');\n         }, 1500);\n      }\n   }\n\n   return (\n      <Fragment>\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={290} autoHide>\n            <ul className=\"list-group new-customer-list\">\n               {newCustomers && newCustomers.map((customer, key) => (\n                  <li className=\"list-group-item d-flex justify-content-between\" key={key}>\n                     <div className=\"d-flex align-items-start\">\n                        <div className=\"media\">\n                           <div className=\"media-left mr-15\">\n                              {customer.photo_url === '' ?\n                                 <Avatar>{customer.customer_name.charAt(0)}</Avatar>\n                                 : <img src={customer.photo_url} alt=\"project logo\" className=\"media-object rounded-circle\" width=\"40\" height=\"40\" />\n                              }\n                           </div>\n                           <div className=\"media-body\">\n                              <span className=\"d-block fs-14\">{customer.customer_name}</span>\n                              <span className=\"d-block fs-12 text-muted\">{customer.customer_email}</span>\n                           </div>\n                        </div>\n                     </div>\n                     <div className=\"d-flex align-items-end\">\n                        <button type=\"button\" className=\"text-primary\" onClick={() => onEditCustomer(customer)}>\n                           <i className=\"zmdi zmdi-edit\"></i>\n                        </button>\n                        <button type=\"button\" className=\"text-danger\" onClick={() => onDeleteCustomer(customer)}>\n                           <i className=\"zmdi zmdi-close\"></i>\n                        </button>\n                     </div>\n                  </li>\n               ))}\n            </ul>\n         </Scrollbars>\n         <div className=\"d-flex p-3\">\n            <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => addNewCustomer()}><IntlMessages id=\"widgets.addNew\" /></Button>\n         </div>\n         {/* Delete Customer Confirmation Dialog */}\n         <DeleteConfirmationDialog\n            ref={deleteConfirmationDialogRef}\n            title=\"Are You Sure Want To Delete?\"\n            message=\"Are You Sure Want To Delete Permanently This Customer.\"\n            onConfirm={() => deleteCustomer()}\n         />\n         {/* Customer Edit Modal*/}\n         {editCustomerModal &&\n            <Modal\n               isOpen={editCustomerModal}\n               toggle={toggleEditCustomerModal}\n            >\n               <ModalHeader toggle={toggleEditCustomerModal}>\n                  {addNewCustomerForm ? 'Add New Customer' : 'Edit Customer'}\n               </ModalHeader>\n               <ModalBody>\n                  {addNewCustomerForm ?\n                     <Form>\n                        <FormGroup>\n                           <Label for=\"customerName\">Name</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"name\"\n                              id=\"customerName\"\n                              value={addNewCustomerDetails.customer_name}\n                              onChange={(e) => onChangeCustomerAddNewForm('customer_name', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"customerEmail\">Email</Label>\n                           <Input\n                              type=\"email\"\n                              name=\"email\"\n                              id=\"customerEmail\"\n                              value={addNewCustomerDetails.customer_email}\n                              onChange={(e) => onChangeCustomerAddNewForm('customer_email', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                     : <Form>\n                        <FormGroup>\n                           <Label for=\"customerId\">Id</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"name\"\n                              id=\"customerId\"\n                              defaultValue={editCustomer.customer_id}\n                              readOnly\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"customerName\">Name</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"name\"\n                              id=\"customerName\"\n                              value={editCustomer.customer_name}\n                              onChange={(e) => onChangeCustomerDetails('customer_name', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"customerEmail\">Email</Label>\n                           <Input\n                              type=\"email\"\n                              name=\"email\"\n                              id=\"customerEmail\"\n                              value={editCustomer.customer_email}\n                              onChange={(e) => onChangeCustomerDetails('customer_email', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                  }\n               </ModalBody>\n               <ModalFooter>\n                  {addNewCustomerForm ?\n                     <div>\n                        <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitAddNewCustomerForm()}><IntlMessages id=\"button.add\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditCustomerModal}><IntlMessages id=\"button.cancel\" /></Button>\n                     </div>\n                     : <div><Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitCustomerEditDetailForm()}><IntlMessages id=\"button.update\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditCustomerModal}><IntlMessages id=\"button.cancel\" /></Button></div>\n                  }\n               </ModalFooter>\n            </Modal>\n         }\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            message={<span id=\"message-id\">{successMessage}</span>}\n         />\n      </Fragment>\n   );\n}\n\nexport default NewCustomers;\n","/**\n * Delete Confirmation Dialog\n */\nimport React, { Component } from 'react';\nimport { Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Button} from '@material-ui/core';\n\nclass DeleteConfirmationDialog extends Component {\n\n   state = {\n      open: false\n   }\n\n   // open dialog\n   open() {\n      this.setState({ open: true });\n   }\n\n   // close dialog\n   close() {\n      this.setState({ open: false });\n   }\n\n   render() {\n      const { title, message, onConfirm } = this.props;\n      return (\n         <Dialog\n            open={this.state.open}\n            onClose={() => this.close()}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n            maxWidth=\"false\"\n         >\n            <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n               <DialogContentText id=\"alert-dialog-description\">\n                  {message}\n               </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n               <Button onClick={onConfirm} className=\"btn-primary text-white\" autoFocus>\n                  Yes\n               </Button>\n               <Button onClick={() => this.close()} className=\"btn-danger text-white\">\n                  Cancel\n               </Button>\n            </DialogActions>\n         </Dialog>\n      );\n   }\n}\n\nexport default DeleteConfirmationDialog;\n"],"sourceRoot":""}