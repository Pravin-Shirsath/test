{"version":3,"sources":["Routes/todo/components/AddNewTask.js","Routes/todo/components/TodoListItem.js","Assets/data/todo-app/options.js","Routes/todo/components/TaskListing.js","Routes/todo/components/TaskStatusFilter.js","Routes/todo/components/TaskDetails.js","Routes/todo/index.js"],"names":["AddNewTask","props","useState","addNewTaskModal","setAddNewTaskModal","newLabels","setNewLabels","taskName","setTaskName","assignTo","setAssignTo","todoApp","useSelector","state","dispatch","useDispatch","toggleAddNewTaskModal","labels","users","className","Button","onClick","variant","IntlMessages","id","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","name","placeholder","onChange","e","target","value","multiple","options","i","l","length","selected","push","Number","map","label","key","user","ModalFooter","newTaskData","taskAssignTo","assign","parseInt","Math","floor","random","task_name","addNewTaskAction","TodoListItem","todo","onSelectTodo","onCheckBoxClickTodoItem","getTaskLabelNames","getTaskAssigners","sortIndex","classNames","completed","FormControlLabel","control","Checkbox","checked","task_status","event","stopPropagation","alt","src","photo_url","width","height","SortableList","toDos","index","withRouter","anchorEl","setAnchorEl","labelMenu","setLabelMenu","optionsMenu","setOptionsMenu","useEffect","fetchTodos","handleClose","selectedToDos","console","log","color","indeterminate","selectAll","selectAllTodo","getUnselectedAllTodo","onAllTodoSelect","IconButton","currentTarget","onLabelSelect","open","onClose","PaperProps","style","option","MenuItem","title","selectStarredTodo","selectUnStarredTodo","onOptionMenuItemSelect","MenuListProps","onLabelMenuItemSelect","labelMenuItemSelect","autoHide","location","getAppLayout","getScrollHeight","onSelectTodoAction","setTimeout","hideLoadingIndicatorAction","onCheckBoxToggleTodoItem","taskLabels","elements","taskLabel","ele","classnames","getLabelClasses","labelClasses","List","ListItem","button","getAllTodoAction","getCompletedTodosAction","getDeletedTodosAction","getStarredTodosAction","activeIndex","activateFilterAction","TaskDetails","taskTitleEdit","setTaskTitleEdit","selectedTodo","newTaskTitle","setNewTaskTitle","taskContentEdit","setTaskContentEdit","task_description","newTaskDescription","setNewTaskDescription","userMenu","setUserMenu","loading","RctSectionLoader","showLoadingIndicatorAction","backToTodosAction","changeTaskAssigner","onChangeTaskAssigner","Avatar","addLabelsIntoTheTaskAction","addLabelsIntoTheTask","markAsStarTodoAction","markAsStarTodo","starred","deleteTodoAction","completeTask","TextField","fullWidth","updateTaskTitle","updateTaskDescription","process","drawerWidth","useStyles","makeStyles","theme","root","flexGrow","zIndex","overflow","position","display","appBar","marginLeft","direction","marginRight","breakpoints","up","navIconHide","toolbar","mixins","drawerPaper","content","backgroundColor","palette","background","default","padding","spacing","TodoList","classes","mobileOpen","setMobileOpen","setttings","settings","getTodos","handleDrawerToggle","showMessage","message","searchTodo","drawer","Helmet","AppBar","Toolbar","updateSearch","onSearchTodo","onUpdateSearch","Hidden","mdUp","Drawer","anchor","rtlLayout","paper","ModalProps","keepMounted","smDown","implementation","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","closeSnakbarAction"],"mappings":"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","file":"static/js/219.066f1318.chunk.js","sourcesContent":["/**\n * Add New Task Component\n * Used To Add New Task In The Todo List\n */\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Label,\n   Input\n} from 'reactstrap';\n\n// redux actions\nimport { addNewTaskAction } from 'Store/Actions';\n\n// intl message\nimport IntlMessages from 'Util/IntlMessages';\n\nfunction AddNewTask(props) {\n   const [addNewTaskModal, setAddNewTaskModal] = useState(false);\n   const [newLabels, setNewLabels] = useState(null);\n   const [taskName, setTaskName] = useState('');\n   const [assignTo, setAssignTo] = useState(null);\n   const todoApp = useSelector(state => state.todoApp);\n   const dispatch = useDispatch();\n   /**\n    * Toggle Add New Task Modal\n    */\n   const toggleAddNewTaskModal = () => {\n      setAddNewTaskModal(!addNewTaskModal);\n   }\n\n   /**\n    * Handle Add New Task\n    */\n   const addNewTask = () => {\n      let newTaskData;\n      let taskAssignTo;\n      const { users } = todoApp;\n      if (taskName !== '' && assignTo !== null && newLabels !== null) {\n         for (const assign of users) {\n            if (parseInt(assignTo) === assign.id) {\n               taskAssignTo = assign\n            }\n         }\n         let randomId = Math.floor((Math.random() * 1000) + 1);\n         newTaskData = {\n            id: randomId,\n            task_name: taskName,\n            assignTo: taskAssignTo,\n            labels: newLabels\n         }\n         setAddNewTaskModal(false);\n         dispatch(addNewTaskAction(newTaskData));\n      }\n   }\n\n   /**\n    * On Change Assign To\n    */\n   const onChangeAssignTo = (e) => {\n      setAssignTo(e.target.value)\n   }\n\n   /**\n    * On Change Labels\n    */\n   const onChangeLabels = (e) => {\n      var options = e.target.options;\n      var value = [];\n      for (var i = 0, l = options.length; i < l; i++) {\n         if (options[i].selected) {\n            value.push(Number(options[i].value));\n         }\n      }\n      setNewLabels(value);\n   }\n   const { labels, users } = todoApp;\n   return (\n      <div className=\"add-task p-20\">\n         <Button\n            onClick={toggleAddNewTaskModal}\n            variant=\"contained\"\n            className=\"btn-danger text-white btn-block font-weight-bold\"\n         >\n            <i className=\"zmdi zmdi-edit mr-10 font-lg\"></i>\n            <IntlMessages id=\"components.addNewTasks\" />\n         </Button>\n         <Modal isOpen={addNewTaskModal} toggle={toggleAddNewTaskModal}>\n            <ModalHeader toggle={toggleAddNewTaskModal}><IntlMessages id=\"components.addNewTasks\" /></ModalHeader>\n            <ModalBody>\n               <Form>\n                  <FormGroup>\n                     <Label for=\"task-name\">Task Name</Label>\n                     <Input type=\"text\" name=\"taskName\" id=\"task-name\" placeholder=\"Enter Task Name\" onChange={(e) => setTaskName(e.target.value)} />\n                  </FormGroup>\n                  <FormGroup>\n                     <Label for=\"labels\">Task Labels</Label>\n                     <Input type=\"select\" name=\"labels\" id=\"task-labels\" multiple onChange={onChangeLabels}>\n                        {labels.map((label, key) => (\n                           <option key={key} value={label.value}>{label.name}</option>\n                        ))}\n                     </Input>\n                  </FormGroup>\n                  <FormGroup>\n                     <Label for=\"labels\">Assign To</Label>\n                     <Input type=\"select\" name=\"labels\" id=\"task-labels\" onChange={onChangeAssignTo} >\n                        {users.map((user, key) => (\n                           <option key={key} value={user.id}>{user.name}</option>\n                        ))}\n                     </Input>\n                  </FormGroup>\n               </Form>\n            </ModalBody>\n            <ModalFooter>\n               <Button variant=\"contained\" className=\"btn-primary text-white\" onClick={addNewTask}><IntlMessages id=\"button.add\" /></Button>{' '}\n               <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleAddNewTaskModal}><IntlMessages id=\"button.cancel\" /></Button>\n            </ModalFooter>\n         </Modal>\n      </div>\n   );\n}\n\n\nexport default AddNewTask;\n","/**\n * Todo List Item Component\n */\nimport React from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classNames from 'classnames';\n\nconst TodoListItem = ({ todo, onSelectTodo, onCheckBoxClickTodoItem, getTaskLabelNames, getTaskAssigners, sortIndex }) => (\n    <li className={classNames('d-flex justify-content-between align-items-center list-item', { 'strike': todo.completed })} key={todo.id} onClick={() => onSelectTodo(todo)}>\n        <div className=\"media\">\n            <FormControlLabel control={\n               <Checkbox\n                  checked={todo.task_status}\n                  onClick={(event) => {\n                     event.stopPropagation();\n                     onCheckBoxClickTodoItem(todo);\n                  }}\n               />\n            } />\n            <div className=\"media-body\">\n               <h5 className=\"mb-2\">{todo.task_name}</h5>\n               {getTaskLabelNames(todo.labels)}\n            </div>\n        </div>\n        <div className=\"todo-user\">\n         <img className=\"img-fluid rounded-circle\" alt=\"user-img\" src={todo.assignTo && todo.assignTo.photo_url} width=\"35\" height=\"35\" />\n        </div>\n    </li>\n);\n\nexport default TodoListItem;\n","let options = [\n    {\n        'title': 'All',\n    },\n    {\n        'title': 'None',\n    },\n    {\n        'title': 'Starred',\n    },\n    {\n        'title': 'Unstarred',\n    }\n];\n\nexport default options;","/**\n * Task Listing Component\n * Used To Display Task List\n */\nimport React, { useState, useEffect } from 'react';\nimport IconButton from '@material-ui/core/IconButton'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport classnames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { withRouter } from 'react-router-dom';\n\n// components\nimport TodoListItem from './TodoListItem';\n\n// helpers\nimport { getAppLayout } from 'Helpers/helpers';\n\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\n// redux action\nimport {\n\tonSelectTodoAction,\n\thideLoadingIndicatorAction,\n\tfetchTodos,\n\tonCheckBoxToggleTodoItem,\n\tselectAllTodo,\n\tgetUnselectedAllTodo,\n\tselectStarredTodo,\n\tselectUnStarredTodo,\n\tonLabelSelect,\n\tonLabelMenuItemSelect\n} from 'Store/Actions';\n\n// options\nimport options from 'Assets/data/todo-app/options';\n\nconst SortableList = ({ toDos, onSelectTodo, onCheckBoxClickTodoItem, getTaskLabelNames }) => (\n\t<ul className=\"list-unstyled todo-all-list mb-0 ie-flex\">\n\t\t{(toDos && toDos !== null) && toDos.map((todo, key) => {\n\t\t\treturn (\n\t\t\t\t<TodoListItem\n\t\t\t\t\tkey={key}\n\t\t\t\t\ttodo={todo}\n\t\t\t\t\tsortIndex={key}\n\t\t\t\t\tindex={key}\n\t\t\t\t\tonSelectTodo={onSelectTodo}\n\t\t\t\t\tonCheckBoxClickTodoItem={onCheckBoxClickTodoItem}\n\t\t\t\t\tgetTaskLabelNames={getTaskLabelNames}\n\t\t\t\t/>\n\t\t\t)\n\t\t})}\n\t</ul>\n);\n\nfunction TaskListing(props){\n   const [anchorEl, setAnchorEl] = useState(null);\n   const [labelMenu, setLabelMenu] = useState(false);\n   const [optionsMenu, setOptionsMenu] = useState(false);\n   const dispatch = useDispatch();\n   const todoApp = useSelector(state=> state.todoApp);\n   \n   useEffect(() => {\n      dispatch(fetchTodos());\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   },[]);\n\n   /**\n    * Function to return task label name\n    */\n\tconst getTaskLabelNames = (taskLabels) => {\n\t\tlet elements = [];\n      const { labels } = todoApp;\n\t\tfor (const taskLabel of taskLabels) {\n\t\t\tfor (const label of labels) {\n\t\t\t\tif (label.value === taskLabel) {\n\t\t\t\t\tlet ele = <span key={label.value}\n\t\t\t\t\t\tclassName={classnames('badge badge-pill', { 'badge-success': label.value === 1, 'badge-primary': label.value === 2, 'badge-info': label.value === 3, 'badge-danger': label.value === 4 })}\n\t\t\t\t\t>\n\t\t\t\t\t\t<IntlMessages id={label.name} />\n\t\t\t\t\t</span>;\n\t\t\t\t\telements.push(ele);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn elements;\n\t}\n\n   /**\n    * On Checkbox click todo item\n    */\n\tconst onCheckBoxClickTodoItem = (todo) => {\n\t\tdispatch(onCheckBoxToggleTodoItem(todo));\n\t}\n\n   /**\n    * On Select Todo List Item\n    */\n\tconst onSelectTodo = (todo) => {\n      dispatch(onSelectTodoAction(todo));\n\t\tsetTimeout(() => {\n         dispatch(hideLoadingIndicatorAction());\n\t\t}, 1200);\n\t}\n\n\tconst handleClose = () => {\n      setAnchorEl(null);\n      setLabelMenu(false);\n      setOptionsMenu(false);\n\t}\n\n\tconst handleClick = event => {\n      setAnchorEl(event.currentTarget);\n      setOptionsMenu(true);\n\t}\n\n   /**\n    * on all todo select\n    */\n\tconst onAllTodoSelect = () => {\n      const selectAll = todoApp.selectedToDos < todoApp.toDos.length;\n\t\tif (selectAll){\n\t\t\tdispatch(selectAllTodo());\n\t\t} else {\n         dispatch(getUnselectedAllTodo());\n\t\t}\n\t}\n\n   /**\n    * on option menu select\n    */\n\tconst onOptionMenuItemSelect = (option) => {\n\t\tswitch (option.title) {\n\t\t\tcase 'All':\n\t\t\t\thandleClose();\n            dispatch(selectAllTodo());\n\t\t\t\tbreak;\n\t\t\tcase 'None':\n\t\t\t\thandleClose();\n            dispatch(getUnselectedAllTodo());\n\t\t\t\tbreak;\n\t\t\tcase 'Starred':\n\t\t\t\thandleClose();\n            dispatch(selectStarredTodo());\n\t\t\t\tbreak;\n\t\t\tcase 'Unstarred':\n\t\t\t\thandleClose();\n            dispatch(selectUnStarredTodo());\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n   /**\n    * On Label Select Menu\n    */\n\tconst labelSelect = event => {\n      dispatch(onLabelSelect());\n      setAnchorEl(event.currentTarget)\n      setLabelMenu(true);\n\t};\n\n   /**\n    * On Label Select\n    */\n\tconst labelMenuItemSelect = (label) => {\n\t\thandleClose();\n\t\tdispatch(onLabelMenuItemSelect(label));\n\t}\n\n   /**\n   * Get Scroll Height\n   */\n\tconst getScrollHeight = () => {\n\t\tconst { location } = props;\n\t\tconst appLayout = getAppLayout(location)\n\t\tswitch (appLayout) {\n\t\t\tcase 'app':\n\t\t\t\treturn 'calc(100vh - 197px)';\n\t\t\tcase 'agency':\n\t\t\t\treturn 'calc(100vh - 382px)';\n\t\t\tcase 'boxed':\n\t\t\t\treturn 'calc(100vh - 382px)';\n\t\t\tcase 'horizontal':\n\t\t\t\treturn 'calc(100vh - 248px)';\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n   const { toDos, selectedToDos, labels } = todoApp;\n   console.log(toDos,'toDos')\n   return (\n      <div className=\"list-wrap\">\n         <div className=\"top-head\">\n            <Checkbox color=\"primary\"\n               indeterminate={selectedToDos > 0 && selectedToDos < toDos.length}\n               checked={selectedToDos > 0}\n               onChange={() => onAllTodoSelect()}\n               value=\"SelectMail\"\n            />\n            <IconButton onClick={handleClick} aria-owns={anchorEl ? 'simple-menu' : null} aria-haspopup=\"true\">\n               <i className=\"zmdi zmdi-caret-down\"></i>\n            </IconButton>\n            {(selectedToDos > 0) &&\n               <IconButton onClick={labelSelect}>\n                  <i className=\"zmdi zmdi-label-alt\" />\n               </IconButton>}\n            <Menu\n               id=\"long-menu\"\n               anchorEl={anchorEl}\n               open={optionsMenu}\n               onClose={handleClose}\n               PaperProps={{\n                  style: {\n                     width: 200\n                  }\n               }}>\n               {options.map((option, key) => (\n                  <MenuItem key={key} onClick={() => onOptionMenuItemSelect(option)}>{option.title}\n                  </MenuItem>\n               ))}\n            </Menu>\n            <Menu id=\"label-menu\"\n               anchorEl={anchorEl}\n               open={labelMenu}\n               onClose={handleClose}\n               MenuListProps={{\n                  style: {\n                     width: 150,\n                  },\n               }}>\n               {console.log(labels,'labels')}\n               {labels.map(label =>\n                  <MenuItem key={label.value} onClick={() => labelMenuItemSelect(label)}>\n                     <IntlMessages id={label.name} />\n                  </MenuItem>,\n               )}\n            </Menu>\n         </div>\n         <Scrollbars\n            className=\"rct-scroll\"\n            autoHide\n            style={{ height: getScrollHeight() }}\n         >\n            <SortableList\n               toDos={toDos}\n               onSelectTodo={onSelectTodo}\n               onCheckBoxClickTodoItem={onCheckBoxClickTodoItem}\n               getTaskLabelNames={getTaskLabelNames}\n            />\n         </Scrollbars>\n      </div>\n   );\n}\n\n\nexport default withRouter(TaskListing);\n","/**\n * Task Status Filter\n * Used To Filter Todo List\n */\nimport React from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { withRouter } from 'react-router-dom';\n\n// helpers\nimport { getAppLayout } from 'Helpers/helpers';\n\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\n// redux action\nimport {\n    getAllTodoAction,\n    getCompletedTodosAction,\n    getDeletedTodosAction,\n    getStarredTodosAction,\n    activateFilterAction\n} from 'Store/Actions';\n\nfunction TaskStatusFilter(props) {\n   const dispatch = useDispatch();\n   const todoApp = useSelector(state => state.todoApp);\n    /**\n     * Function to filter the todo list with labels\n     */\n   const onFilterTodo = (activeIndex) => {\n      dispatch(activateFilterAction(activeIndex));\n   }\n\n    /**\n     * Get Label Classes\n     */\n   const getLabelClasses = (value) => {\n      let labelClasses = '';\n      switch (value) {\n         case 1:\n               labelClasses = 'ladgend bg-success';\n               return labelClasses;\n         case 2:\n               labelClasses = 'ladgend bg-primary';\n               return labelClasses;\n         case 3:\n               labelClasses = 'ladgend bg-info';\n               return labelClasses;\n         case 4:\n               labelClasses = 'ladgend bg-danger';\n               return labelClasses;\n         default:\n               return labelClasses;\n      }\n   }\n\n    /**\n\t * Get Scroll Height\n\t */\n   const getScrollHeight = () => {\n      const { location } = props;\n      const appLayout = getAppLayout(location)\n      switch (appLayout) {\n         case 'app':\n               return 'calc(100vh - 288px)';\n         case 'agency':\n               return 'calc(100vh - 416px)';\n         case 'boxed':\n               return 'calc(100vh - 416px)';\n         case 'horizontal':\n               return 'calc(100vh - 335px)';\n         default:\n               break;\n      }\n   }\n\n   const { labels } = todoApp;\n   return (\n      <Scrollbars className=\"rct-scroll\" autoHide style={{ height: getScrollHeight() }}>\n            <div className=\"sidebar-filters-wrap\">\n               <List className=\"filters\">\n                  <ListItem\n                     button\n                     onClick={() => dispatch(getAllTodoAction())}\n                  >\n                     <span className=\"filter-title\"><IntlMessages id=\"components.all\" /></span>\n                  </ListItem>\n               </List>\n               <h6 className=\"sidebar-title px-20 pt-20\">Filters</h6>\n               <List className=\"filters list-unstyled\">\n                  <ListItem\n                     button\n                     onClick={() => dispatch(getCompletedTodosAction())}\n                  >\n                     <i className=\"zmdi zmdi-check-square mr-3\"></i>\n                     <span className=\"filter-title\"><IntlMessages id=\"widgets.done\" /></span>\n                  </ListItem>\n                  <ListItem\n                     button\n                     onClick={() => dispatch(getDeletedTodosAction())}\n                  >\n                     <i className=\"zmdi zmdi-delete mr-3\"></i>\n                     <span className=\"filter-title\"><IntlMessages id=\"widgets.deleted\" /></span>\n                  </ListItem>\n                  <ListItem\n                     button\n                     onClick={() => dispatch(getStarredTodosAction())}\n                  >\n                        <i className=\"zmdi zmdi-star mr-3\"></i>\n                        <span className=\"filter-title\"><IntlMessages id=\"widgets.starred\" /></span>\n                  </ListItem>\n               </List>\n               <h6 className=\"sidebar-title px-20 pt-20\">Labels</h6>\n               <List className=\"list-unstyled filters\">\n                  {labels && labels.map((label, key) => (\n                     <ListItem\n                        button\n                        onClick={() => onFilterTodo(label.value)}\n                        key={key}\n                     >\n                        <span className={getLabelClasses(label.value)}></span>\n                        <span className=\"filter-title\"><IntlMessages id={label.name} /></span>\n                     </ListItem>\n                  ))}\n               </List>\n            </div>\n      </Scrollbars>\n   );\n}\n\nexport default withRouter(TaskStatusFilter);\n","/**\n * Task Details\n */\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IconButton from '@material-ui/core/IconButton';\nimport classNames from 'classnames';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport TextField from '@material-ui/core/TextField';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Input } from 'reactstrap';\nimport Button from '@material-ui/core/Button';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// redux action\nimport {\n\tbackToTodosAction,\n\tshowLoadingIndicatorAction,\n\tmarkAsStarTodoAction,\n\tdeleteTodoAction,\n\taddLabelsIntoTheTaskAction,\n\tcompleteTask,\n\tupdateTaskTitle,\n\tupdateTaskDescription,\n\tchangeTaskAssigner,\n\tfetchTodos\n} from 'Store/Actions';\n\nfunction TaskDetails(props) {\n   const dispatch = useDispatch();\n   const todoApp = useSelector(state => state.todoApp);   \n   const [anchorEl, setAnchorEl] = useState(null);\n   const [taskTitleEdit, setTaskTitleEdit] = useState(false);\n   const [newTaskTitle, setNewTaskTitle] = useState(todoApp.selectedTodo.task_name);\n   const [taskContentEdit, setTaskContentEdit] = useState(false);\n   const [newTaskDescription, setNewTaskDescription] = useState(todoApp.selectedTodo.task_description);\n   const [userMenu, setUserMenu] = useState(false);\n   const [labelMenu, setLabelMenu] = useState(false);\n\n\t// back to todos hanlder\n\tconst backToTodos = () => {\n\t\tdispatch(showLoadingIndicatorAction());\n\t\tsetTimeout(() => {\n         dispatch(backToTodosAction());\n\t\t}, 1500);\n\t}\n\t// mark as star todo\n\tconst markAsStarTodo = () => {\n      const { selectedTodo } = todoApp;\n\t\tdispatch(markAsStarTodoAction(selectedTodo));\n\t}\n\t// delete todo\n\tconst deleteTodo = () =>{\n      dispatch(deleteTodoAction());\n      dispatch(fetchTodos())\n\t}\n\t/**\n\t * Function to return task label name\n\t */\n\tconst getTaskLabelNames = (taskLabels) => {\n\t\tlet elements = [];\n      const { labels } = todoApp;\n\t\tfor (const taskLabel of taskLabels) {\n\t\t\tfor (const label of labels) {\n\t\t\t\tif (label.value === taskLabel) {\n\t\t\t\t\tlet ele = <span key={label.value}\n\t\t\t\t\t\tclassName={classNames('badge mr-10 mb-5', { 'badge-success': label.value === 1, 'badge-primary': label.value === 2, 'badge-info': label.value === 3, 'badge-danger': label.value === 4 })}\n\t\t\t\t\t>\n\t\t\t\t\t\t<IntlMessages id={label.name} />\n\t\t\t\t\t</span>;\n\t\t\t\t\telements.push(ele);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn elements;\n\t}\n\tconst handleClick = event => {\n      setLabelMenu(true);\n      setAnchorEl(event.currentTarget);\n\t}\n\tconst handleClose = () => {\n      setAnchorEl(null);\n      setLabelMenu(false);\n\t}\n\t/**\n\t * Function to edit the task title\n\t */\n\tconst editTaskTitle = () => {\n      setTaskTitleEdit(true);\n\t}\n\t/**\n\t* Function to add labels in the task\n\t*/\n\tconst addLabelsIntoTheTask = (label) => {\n      setAnchorEl(null);\n\t\tdispatch(addLabelsIntoTheTaskAction(label));\n\t}\n\t/**\n\t * Function to complete task\n\t */\n\tconst onCompleteTask = () => {\n\t\tdispatch(completeTask());\n\t}\n\t/**\n\t * Submit new task title\n\t */\n\tconst submitNewTaskTitle = () => {\n      setTaskTitleEdit(false);\n      dispatch(updateTaskTitle(newTaskTitle));\n\t}\n\t/**\n\t * Function to edit the task content\n\t */\n\tconst editTaskDescription = () => {\n      setTaskContentEdit(true);\n\t}\n\t/**\n\t * Function to submit new task description\n\t */\n\tconst submitNewTaskDescription = () => {\n      setTaskContentEdit(false);\n      dispatch(updateTaskDescription(newTaskDescription));\n   }\n   \n\tconst handleUserClick = event => {\n      setUserMenu(true);\n      setAnchorEl(event.currentTarget);\n   };\n   \n\tconst handleRequestClose = () => {\n      setUserMenu(false);\n\t};\n\t/**\n\t * Function to change task asssigner\n\t */\n\tconst onChangeTaskAssigner = (user) => {\n      setUserMenu(false);\n      dispatch(changeTaskAssigner(user));\n\t}\n   const { loading, selectedTodo, labels, users } = todoApp;\n   return (\n      <div className=\"list-wrap\">\n         {loading ? <RctSectionLoader />\n            : <div className=\"task-detail-wrapper\">\n               <div className=\"top-head\">\n                  <IconButton aria-label=\"back arrow\" onClick={() => backToTodos()}>\n                     <i className=\"zmdi zmdi-arrow-back\"></i>\n                  </IconButton>\n               </div>\n               <Scrollbars className=\"rct-scroll\" autoHide style={{ height: \"calc(100vh - 197px)\" }}>\n                  <div className=\"task-detail\">\n                     <div className=\"d-flex justify-content-between task-detail-top py-3 px-4 border-bottom\">\n                        <div className=\"media align-items-center\" onClick={handleUserClick}>\n                           <img src={selectedTodo.assignTo.photo_url} alt=\"select user\" className=\"img-fluid rounded-circle mr-15\" width=\"50\" height=\"50\" />\n                           <div className=\"media-body\">\n                              <h5 className=\"mb-0\">{selectedTodo.assignTo.name}</h5>\n                           </div>\n                        </div>\n                        <Menu\n                           id=\"label-menu\"\n                           anchorEl={anchorEl}\n                           open={userMenu}\n                           onClose={handleRequestClose}\n                           MenuListProps={{\n                              style: {\n                                 width: 180,\n                              },\n                           }}>\n                           {users.map((user, index) =>\n                              <MenuItem key={index} value={user.id} onClick={() => {\n                                 onChangeTaskAssigner(user);\n                              }}>\n                                 <div className=\"d-flex user-name manage-margin align-items-center\">\n                                    <Avatar src={user.photo_url} alt={user.name} /><h4>{user.name}</h4>\n                                 </div>\n                              </MenuItem>\n                           )}\n                        </Menu>\n                        <div className=\"task-action d-flex align-items-center\">\n                           <ul className=\"list-unstyled mb-0 d-flex\">\n                              <li>\n                                 <IconButton aria-owns={anchorEl ? 'simple-menu' : null} aria-haspopup=\"true\" onClick={handleClick}>\n                                    <i className=\"zmdi zmdi-label-alt\"></i>\n                                 </IconButton>\n                                 <Menu\n                                    id=\"simple-menu\"\n                                    anchorEl={anchorEl}\n                                    open={labelMenu}\n                                    onClose={handleClose}\n                                    MenuListProps={{\n                                       style: {\n                                          width: 150\n                                       }\n                                    }}\n                                 >\n                                    {labels.map((label) => (\n                                       <MenuItem onClick={() => addLabelsIntoTheTask(label)} key={label.value}>\n                                          <IntlMessages id={label.name} />\n                                       </MenuItem>\n                                    ))}\n                                 </Menu>\n                              </li>\n                              <li>\n                                 <IconButton onClick={() => markAsStarTodo()}>\n                                    <i className={classNames('zmdi', { ' zmdi-star-outline': !selectedTodo.starred, 'zmdi-star': selectedTodo.starred })}></i>\n                                 </IconButton>\n                              </li>\n                              <li>\n                                 <IconButton onClick={() => deleteTodo()}><i className=\"zmdi zmdi-delete\"></i></IconButton>\n                              </li>\n                           </ul>\n                        </div>\n                     </div>\n                     <div className=\"task-detail-content px-50 py-3 border-bottom\">\n                        <div className=\"task-labels mb-3\">\n                           {getTaskLabelNames(selectedTodo.labels)}\n                        </div>\n                        <div className=\"task-content\">\n                           <div className=\"mb-25 task-box bg-aqua\">\n                              <IconButton aria-label=\"check\" onClick={() => onCompleteTask()}>\n                                 <i className={classNames('zmdi zmdi-check-all', { 'text-info': selectedTodo.completed })}></i>\n                              </IconButton>\n                              {taskTitleEdit ?\n                                 <span>\n                                    <TextField\n                                       id=\"title\"\n                                       fullWidth\n                                       type=\"text\"\n                                       value={newTaskTitle}\n                                       onChange={(e) => setNewTaskTitle(e.target.value)}\n                                    />\n                                    <IconButton aria-label=\"check\" className=\"task-btn\" onClick={() => submitNewTaskTitle()}>\n                                       <i className=\"zmdi zmdi-check\"></i>\n                                    </IconButton>\n                                 </span>\n                                 : <span>\n                                    <span>{selectedTodo.task_name}</span>\n                                    <IconButton aria-label=\"check\" className=\"task-btn\" onClick={() => editTaskTitle()}>\n                                       <i className=\"zmdi zmdi-edit\"></i>\n                                    </IconButton>\n                                 </span>\n                              }\n                           </div>\n                           <div className=\"task-box bg-aqua mb-3\">\n                              {taskContentEdit ?\n                                 <div>\n                                    <TextField\n                                       id=\"task-description\"\n                                       fullWidth\n                                       type=\"text\"\n                                       value={newTaskDescription}\n                                       onChange={(e) => setNewTaskDescription(e.target.value)}\n                                    />\n                                    <IconButton aria-label=\"check\" className=\"task-btn\" onClick={() => submitNewTaskDescription()}>\n                                       <i className=\"zmdi zmdi-check\"></i>\n                                    </IconButton>\n                                 </div>\n                                 : <div>\n                                    <span className=\"small-text\">{selectedTodo.task_description}</span>\n                                    <IconButton aria-label=\"check\" className=\"task-btn\" onClick={() => editTaskDescription()}>\n                                       <i className=\"zmdi zmdi-edit\"></i>\n                                    </IconButton>\n                                 </div>\n                              }\n                           </div>\n                        </div>\n                     </div>\n                     <div className=\"task-comment px-30 py-3\">\n                        <h3 className=\"mb-20\">Comments</h3>\n                        <ul className=\"list-unstyled\">\n                           <li className=\"media\">\n                              <img src={`${process.env.PUBLIC_URL}/assets/images/img/user-2.jpg`} className=\"img-fluid rounded-circle mr-15\" alt=\"user profile\" width=\"50\" height=\"50\" />\n                              <div className=\"media-body pt-5\">\n                                 <h6 className=\"mb-0\">Jhon Smith <span className=\"fs-14\">Jan 9, 2017, 3:03:28 PM</span></h6>\n                                 <span className=\"text-muted font-xs\">Asperger S Syndrome Is There Real Cure For It</span>\n                              </div>\n                           </li>\n                           <li className=\"media\">\n                              <img src={`${process.env.PUBLIC_URL}/assets/images/img/user-3.jpg`} className=\"img-fluid rounded-circle mr-15\" alt=\"user profile\" width=\"50\" height=\"50\" />\n                              <div className=\"media-body pt-5\">\n                                 <h6 className=\"mb-0\">Rukshana Smith <span className=\"fs-14\">Jan 9, 2017, 3:03:28 PM</span></h6>\n                                 <span className=\"text-muted font-xs\">Asperger S Syndrome Is There Real Cure For It</span>\n                              </div>\n                           </li>\n                        </ul>\n                     </div>\n                  </div>\n                  <div className=\"task-foot d-flex align-items-center p-20\">\n                     <Input type=\"textarea\" name=\"text\" placeholder=\"Send Message\" id=\"exampleText\" className=\"mr-3\" />\n                     <Button variant=\"contained\" color=\"primary\" className=\"bg-primary\">\n                        Send\n                     <i className=\"zmdi zmdi-mail-send ml-2\"></i>\n                     </Button>\n                  </div>\n               </Scrollbars>\n            </div>\n         }\n      </div>\n   );\n}\n\n\nexport default TaskDetails;\n","/**\n * Todo Redux App\n */\nimport React, { useState, useEffect } from 'react';\nimport { FormGroup, Input } from 'reactstrap';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Snackbar, Drawer, AppBar, Toolbar, IconButton, Hidden} from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Helmet } from \"react-helmet\";\nimport { useSelector, useDispatch } from 'react-redux';\n// component\nimport AddNewTask from './components/AddNewTask';\nimport TaskListing from './components/TaskListing';\nimport TaskStatusFilter from './components/TaskStatusFilter';\nimport TaskDetails from './components/TaskDetails';\n// redux actions\nimport { closeSnakbarAction, updateSearch, onSearchTodo, getTodos } from 'Store/Actions';\nconst drawerWidth = 250;\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t\theight: 'auto',\n\t\tzIndex: 1,\n\t\toverflow: 'hidden',\n\t\tposition: 'relative',\n\t\tdisplay: 'flex',\n\t\twidth: '100%',\n\t},\n\tappBar: {\n\t\tposition: 'absolute',\n\t\tmarginLeft: theme.direction !== 'rtl' ? drawerWidth : 0,\n\t\tmarginRight: theme.direction === 'rtl' ? drawerWidth : 0,\n\t\t[theme.breakpoints.up('md')]: {\n\t\t\twidth: `calc(100% - ${drawerWidth}px)`,\n\t\t}\n\t},\n\tnavIconHide: {\n\t\t[theme.breakpoints.up('md')]: {\n\t\t\tdisplay: 'none',\n\t\t},\n\t},\n\ttoolbar: theme.mixins.toolbar,\n\tdrawerPaper: {\n\t\twidth: drawerWidth,\n\t\t[theme.breakpoints.up('md')]: {\n\t\t\tposition: 'relative',\n\t\t},\n\t},\n\tcontent: {\n\t\tflexGrow: 1,\n\t\tbackgroundColor: theme.palette.background.default,\n\t\tpadding: theme.spacing(3),\n\t},\n}));\n\nfunction TodoList(){\n   const classes = useStyles();\n   const [mobileOpen,setMobileOpen] = useState(false);\n   const todoApp = useSelector(state=> state.todoApp);\n   const setttings = useSelector(state => state.settings);\n\n   const dispatch = useDispatch();\n\n   useEffect(() => {\n      dispatch(getTodos());\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n   }, [dispatch])\n   \n\tconst handleDrawerToggle = () => {\n      setMobileOpen(!mobileOpen);\n\t};\n\n\t/**\n\t * Search Todo Hanlder\n\t */\n\tconst onUpdateSearch = (e) => {\n      dispatch(updateSearch(e.target.value));\n      dispatch(onSearchTodo(e.target.value));\n\t}\n\n   const { selectedTodo, showMessage, message, searchTodo}  = todoApp\n   const drawer = (\n      <div className=\"todo-sidebar-wrap\">\n         <div className=\"user-wrap d-flex justify-content-between\">\n            <div className=\"media align-items-center\">\n               <img\n                  src={`${process.env.PUBLIC_URL}/assets/images/avatars/user-5.jpg`}\n                  alt=\"user-profile\"\n                  className=\"img-fluid rounded-circle mr-3\"\n                  width=\"60\"\n                  height=\"60\"\n               />\n               <div className=\"media-body\">\n                  <h5 className=\"text-white mb-0\">Jhon Doe</h5>\n                  <p className=\"text-white font-xs mb-0\">jhon@example.com</p>\n               </div>\n            </div>\n         </div>\n         <AddNewTask />\n         <TaskStatusFilter />\n      </div>\n   );\n   return (\n      <div className=\"todo-wrapper\">\n         <Helmet>\n            <title>Todo App</title>\n            <meta name=\"description\" content=\"Todo App\" />\n         </Helmet>\n         <div className={classes.root}>\n            <AppBar className={classes.appBar} position=\"static\">\n               <Toolbar className=\"d-flex justify-content-between\">\n                  <IconButton\n                     aria-label=\"open drawer\"\n                     onClick={handleDrawerToggle}\n                     className={classes.navIconHide}>\n                     <MenuIcon />\n                  </IconButton>\n                  <FormGroup className=\"mb-0 w-25\">\n                     <Input type=\"search\"\n                        name=\"search\"\n                        id=\"search-todo\"\n                        className=\"has-input-right\"\n                        placeholder=\"Search..\"\n                        onChange={(e) => onUpdateSearch(e)}\n                        value={searchTodo}\n                     />\n                  </FormGroup>\n                  <div className=\"d-flex align-items-center\">\n                     <IconButton className=\"mx-1 btn-sm\">\n                        <i className=\"zmdi zmdi-arrow-left\"></i>\n                     </IconButton>\n                     <IconButton className=\"mx-1 btn-sm\">\n                        <i className=\"zmdi zmdi-arrow-right\"></i>\n                     </IconButton>\n                  </div>\n               </Toolbar>\n            </AppBar>\n            <Hidden mdUp className=\"todo-list-wrap\">\n               <Drawer\n                  variant=\"temporary\"\n                  anchor={setttings.rtlLayout === true ? 'right' : 'left'}\n                  open={mobileOpen}\n                  onClose={handleDrawerToggle}\n                  classes={{\n                     paper: classes.drawerPaper,\n                  }}\n                  ModalProps={{\n                     keepMounted: true,\n                  }}\n               >\n                  {drawer}\n               </Drawer>\n            </Hidden>\n            <Hidden smDown implementation=\"css\" className=\"todo-list-wrap\">\n               <Drawer\n                  variant=\"permanent\"\n                  open\n                  classes={{\n                     paper: classes.drawerPaper,\n                  }}\n               >\n                  {drawer}\n               </Drawer>\n            </Hidden>\n            <div className={`bg-transparent ${classes.content}`}>\n               <div className={classes.toolbar} />\n               {selectedTodo === null ?\n                  <TaskListing />\n                  : \n                  <TaskDetails />\n               }\n            </div>\n         </div>\n         <Snackbar\n            anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={showMessage}\n            message={<span id=\"message-id\">{message}</span>}\n            autoHideDuration={1000}\n            onClose={() => dispatch(closeSnakbarAction())}\n         />\n      </div>\n   );\n}\n\nexport default TodoList;\n"],"sourceRoot":""}