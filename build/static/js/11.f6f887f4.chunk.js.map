{"version":3,"sources":["../../../../../../src/.internal/core/utils/Browser.ts","../../../../../../src/.internal/core/utils/Utils.ts","../../../../../../src/.internal/core/utils/Object.ts","../../../../../../src/.internal/core/utils/Strings.ts","../../../../../../src/.internal/core/utils/String.ts"],"names":["isSafari","test","navigator","vendor","isInternetExplorer","userAgent","used","value","copyProperties","source","target","key","stripHash","url","exec","getBaseURI","baseURI","document","loc","location","href","copy","isNotEmpty","toString","relativeToValue","percent","full","relativeRadiusToValue","subtractIfNegative","getPixelRatio","window","devicePixelRatio","capitalize","str","arr","split","toUpperCase","join","stringify","JSON","escapeForRgex","replace","splitTextByCharCount","text","maxChars","fullWords","rtl","fullWordFallback","length","res","currentIndex","words","i","word","match","wordLength","reverseString","parts","RegExp","x","concat","push","truncateWithEllipsis","ellipsis","trim","rtrim","ltrim","reverse","padString","len","char","Array","getFormat","format","hints","toLowerCase","cleanFormat","stripTags","plainText","numberToString","Infinity","negative","Math","abs","parsed","digits","decimals","exponent","zeros","slice","anyToDate","date","Date","setMilliseconds","getMilliseconds","num","Number","anyToNumber","getTime","getYearDay","utc","start","getFullYear","diff","getTimezoneOffset","floor","getWeek","_utc","d","UTC","getMonth","getDate","day","getUTCDay","setUTCDate","getUTCDate","firstDay","getUTCFullYear","ceil","getMonthWeek","firstWeek","currentWeek","getDayFromWeek","week","year","weekday","setUTCFullYear","getDay","get12Hours","hours","base","getTimeZone","long","savings","wotz","toLocaleString","wtz","timeZoneName","substr","fitNumber","min","max","fitNumberRelative","gap","svgPointToSprite","point","sprite","y","sprites","parent","angle","rotation","relativeX","pixelX","ex","relativeY","pixelY","ey","dx","dy","scale","group","pixelPaddingLeft","pixelPaddingTop","spritePointToSvg","spritePointToSprite","toSprite","spriteRectToSvg","rect","p1","p2","width","height","documentPointToSvg","svgContainer","cssScale","bbox","getBoundingClientRect","left","top","e","svgPointToDocument","documentPointToSprite","htmlContainer","spritePointToDocument","element","cs","getComputedStyle","paddingX","parseFloat","paddingLeft","paddingRight","borderX","borderLeftWidth","borderRightWidth","clientWidth","paddingY","paddingTop","paddingBottom","borderY","borderTopWidth","borderBottomWidth","clientHeight","decimalPlaces","number","urlRegexp","parseUrl","protocol","separator","authority","domain","port","path","query","hash","serializeUrl","isRelativeUrl","joinUrl","right","parsedLeft","parsedRight","Error","leftPath","rightPath","pop","isIE","MSInputMethodContext","documentMode","entries","object","hasKey","keys","output","hasOwnProperty","call","eachContinue","fn","each","eachOrdered","ord","order","sort","keysOrdered","merge","object1","object2","Object","assign","clone","parse","forceCopyProperties","copyAllProperties","from","to","STRING","NUMBER","DATE","DURATION","PLACEHOLDER","PLACEHOLDER2","a","b","repeat","string","amount","random","chars","choice","charAt"],"mappings":"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","file":"static/js/11.f6f887f4.chunk.js","sourcesContent":["// Also detects iOS\nexport function isSafari(): boolean {\n\treturn /apple/i.test(navigator.vendor);\n}\n\nexport function isInternetExplorer(): boolean {\n\treturn /MSIE |Trident\\//.test(navigator.userAgent);\n}\n","/**\r\n * A collection of universal utility functions.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../Sprite\";\r\nimport { IPoint } from \"../defs/IPoint\";\r\nimport { IRectangle } from \"../defs/IRectangle\";\r\nimport { Percent } from \"./Percent\";\r\nimport { isSafari } from \"./Browser\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\nimport * as $string from \"./String\";\r\nimport * as $strings from \"./Strings\";\r\nimport * as $object from \"./Object\";\r\nimport * as $array from \"./Array\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MISC FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n\r\n/**\r\n * Marks a value as being used (e.g. because the value has side effects).\r\n */\r\nexport function used<A>(value: A) { }\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function copyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value)) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Removes target from url\r\n */\r\nexport function stripHash(url: string): string {\r\n\treturn /^[^#]*/.exec(url)[0];\r\n}\r\n\r\nexport function getBaseURI() {\r\n\tlet url = \"#\";\r\n\r\n\t// Needed until https://bugs.webkit.org/show_bug.cgi?id=189499 is fixed\r\n\tif (isSafari()) {\r\n\t\tlet baseURI = document.baseURI;\r\n\t\tif (baseURI) {\r\n\t\t\tbaseURI = stripHash(baseURI);\r\n\t\t\tlet loc = stripHash(location.href);\r\n\t\t\tif (baseURI !== loc) {\r\n\t\t\t\turl = loc + url;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn url;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other, omitting undefined, but only if property in target object doesn't have a value set.\r\n *\r\n * @param fromObject  Source object\r\n * @param toObject    Target object\r\n * @return Updated target object\r\n * @todo Maybe consolidate with utils.copy?\r\n */\r\nexport function softCopyProperties(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t// only if value is set\r\n\t\tif ($type.hasValue(value) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\t(<any>target)[key] = value;\r\n\t\t}\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Copies all properties of one object to the other.\r\n *\r\n * @param source     Source object\r\n * @param recipient  Target object\r\n * @return Updated target object\r\n */\r\nexport function copy(source: Object, target: Object): Object {\r\n\t$object.each(source, (key, value) => {\r\n\t\t(<any>target)[key] = value;\r\n\t});\r\n\treturn target;\r\n}\r\n\r\n/**\r\n * Checks if value is not empty (undefined or zero-length string).\r\n *\r\n * @param value  Value to check\r\n * @return `true` if value is not \"empty\"\r\n */\r\nexport function isNotEmpty(value: $type.Optional<string>): value is string {\r\n\treturn $type.hasValue(value) && (value.toString() !== \"\");\r\n}\r\n\r\n/**\r\n * [relativeToValue description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent  [description]\r\n * @param full     [description]\r\n * @return [description]\r\n */\r\nexport function relativeToValue(percent: $type.Optional<number | Percent>, full: number): number {\r\n\tif ($type.isNumber(percent)) {\r\n\t\treturn percent;\r\n\t} else if (percent != null && $type.isNumber(percent.value) && $type.isNumber(full)) {\r\n\t\treturn full * percent.value;\r\n\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * [relativeRadiusToValue description]\r\n *\r\n * Differs from relativeToValue so that if a value is negative, it subtracts\r\n * it from full value.\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param percent             [description]\r\n * @param full                [description]\r\n * @param subtractIfNegative  [description]\r\n * @return [description]\r\n */\r\nexport function relativeRadiusToValue(percent: $type.Optional<number | Percent>, full: number, subtractIfNegative?: boolean): $type.Optional<number> {\r\n\tlet value: $type.Optional<number>;\r\n\r\n\tif ($type.isNumber(percent)) {\r\n\t\tvalue = percent;\r\n\r\n\t\tif (value < 0) {\r\n\t\t\tif (subtractIfNegative) {\r\n\t\t\t\tvalue = full + value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = full - value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t} else if (percent != null && $type.isNumber(percent.value)) {\r\n\t\tvalue = full * percent.value;\r\n\t}\r\n\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * [valueToRelative description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @param full   [description]\r\n * @return [description]\r\n */\r\nexport function valueToRelative(value: number | Percent, full: number): number {\r\n\tif (value instanceof Percent) {\r\n\t\treturn value.value;\r\n\t}\r\n\telse {\r\n\t\treturn value / full;\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns pixel ratio of the current screen (used on retina displays).\r\n *\r\n * @return Pixel ratio\r\n */\r\nexport function getPixelRatio(): number {\r\n\tlet ratio = window.devicePixelRatio || 1;\r\n\treturn ratio;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * STRING FORMATTING FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts camelCased text to dashed version:\r\n * (\"thisIsString\" > \"this-is-string\")\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function camelToDashed(str: string): string {\r\n\treturn str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Converts tring to uppercase.\r\n *\r\n * @param str  String to convert\r\n * @return uppercased string\r\n * @todo Maybe make it better\r\n */\r\nexport function capitalize(str: string): string {\r\n\tlet arr: string[] = str.split(\"\");\r\n\tarr[0] = arr[0].toUpperCase();\r\n\treturn arr.join(\"\");\r\n}\r\n\r\n/**\r\n * Converts any value into its string representation.\r\n *\r\n * @param value  Value\r\n * @return String represantation of the value\r\n */\r\nexport function stringify(value: any): string {\r\n\treturn JSON.stringify(value);\r\n}\r\n\r\n/**\r\n * Escapes string so it can safely be used in a Regex.\r\n *\r\n * @param value  Unsescaped string\r\n * @return Escaped string\r\n */\r\nexport function escapeForRgex(value: string): string {\r\n\treturn value.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\r\n}\r\n\r\n/**\r\n * Splits the text into multiple lines, respecting maximum character count.\r\n * Prioretizes splitting on spaces and punctuation. Falls back on splitting\r\n * mid-word if there's no other option.\r\n *\r\n * @param text      Text\r\n * @param maxChars  Maximum number of characters per line\r\n * @return An array of split text\r\n */\r\nexport function splitTextByCharCount(text: string, maxChars: number, fullWords?: boolean, rtl?: boolean, fullWordFallback?: boolean): string[] {\r\n\r\n\t// Maybe the text fits?\r\n\tif (text.length <= maxChars) {\r\n\t\treturn [text];\r\n\t}\r\n\r\n\t// Init result\r\n\tlet res: string[] = [];\r\n\r\n\r\n\t// Split by words or by charts\r\n\tif (fullWords) {\r\n\r\n\t\t// Split by words first\r\n\r\n\t\t// Split by spacing\r\n\t\tlet currentIndex: number = -1;\r\n\t\t//let tmpText = text.replace(/([,;:!?\\\\\\/\\.]+[\\s]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n\t\tlet tmpText = text.replace(/([,;:!?\\\\\\/]+|[\\s])/g, $strings.PLACEHOLDER + \"$1\" + $strings.PLACEHOLDER);\r\n\t\tlet words = tmpText.split($strings.PLACEHOLDER);\r\n\r\n\t\t// Glue end-of-word punctuation to the word itself\r\n\t\tfor (let i = 1; i < words.length; i++) {\r\n\t\t\tlet word = words[i];\r\n\t\t\tif ((word == \".\" || word == \",\") && words[i - 1].match(/[\\w]+$/)) {\r\n\t\t\t\twords[i - 1] += word;\r\n\t\t\t\twords[i] = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\t// Process each word\r\n\t\tfor (let i = 0; i < words.length; i++) {\r\n\r\n\t\t\t// Get word and symbol count\r\n\t\t\tlet word: string = words[i];\r\n\t\t\tlet wordLength: number = word.length;\r\n\r\n\t\t\t// Ignore empty words\r\n\t\t\tif (wordLength === 0) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Check word length\r\n\t\t\tif ((wordLength > maxChars) && (fullWords !== true || fullWordFallback != false)) {\r\n\t\t\t//if (wordLength > maxChars) {\r\n\t\t\t\t// A single word is longer than allowed symbol count\r\n\t\t\t\t// Break it up\r\n\t\t\t\tif (rtl) {\r\n\t\t\t\t\tword = reverseString(word);\r\n\t\t\t\t}\r\n\t\t\t\tlet parts: RegExpMatchArray | null = word.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (parts) {\r\n\t\t\t\t\tif (rtl) {\r\n\t\t\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//parts.reverse();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tres = res.concat(parts);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\r\n\t\t\t\t// Init current line\r\n\t\t\t\tif (currentIndex === -1) {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex = 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if we need to break into another line\r\n\t\t\t\tif (((res[currentIndex].length + wordLength + 1) > maxChars) && res[currentIndex] !== \"\") {\r\n\t\t\t\t\tres.push(\"\");\r\n\t\t\t\t\tcurrentIndex++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Add word\r\n\t\t\t\tres[currentIndex] += word;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Update index\r\n\t\t\tcurrentIndex = res.length - 1;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\r\n\t\t// Splitting by anywhere (living la vida facil)\r\n\t\tlet parts: RegExpMatchArray | null = text.match(new RegExp(\".{1,\" + maxChars + \"}\", \"g\"));\r\n\r\n\t\tif (parts) {\r\n\t\t\tif (rtl) {\r\n\t\t\t\tfor (let x = 0; x < parts.length; x++) {\r\n\t\t\t\t\tparts[x] = reverseString(parts[x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tres = parts;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Do we have only one word that does not fit?\r\n\t// Since fullWords is set and we can't split the word, we end up with empty\r\n\t// set.\r\n\tif (res.length == 1 && fullWords && fullWordFallback && (res[0].length > maxChars)) {\r\n\t\tres = [];\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Truncates the text to certain character count.\r\n *\r\n * Will add ellipsis if the string is truncated. Optionally, can truncate on\r\n * full words only.\r\n *\r\n * For RTL support, pass in the fifth parameter as `true`.\r\n *\r\n * @param text       Input text\r\n * @param maxChars   Maximum character count of output\r\n * @param ellipsis   Ellipsis string, i.e. \"...\"\r\n * @param fullWords  If `true`, will not break mid-word, unless there's a single word and it does not with into `maxChars`\r\n * @param rtl        Is this an RTL text?\r\n * @return Truncated text\r\n */\r\nexport function truncateWithEllipsis(text: string, maxChars: number, ellipsis: string, fullWords?: boolean, rtl?: boolean): string {\r\n\r\n\tif (text.length <= maxChars) {\r\n\t\treturn text;\r\n\t}\r\n\r\n\t// Calc max chars\r\n\tmaxChars -= ellipsis.length;\r\n\tif (maxChars < 1) {\r\n\t\tmaxChars = 1;\r\n\t\t//ellipsis = \"\";\r\n\t}\r\n\r\n\t// Get lines\r\n\tlet lines = splitTextByCharCount(text, maxChars, fullWords, rtl);\r\n\r\n\t// Use first line\r\n\treturn (lines[0] || \"\") + ellipsis;\r\n}\r\n\r\n/**\r\n * Removes whitespace from beginning and end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function trim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from end of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function rtrim(str: string): string {\r\n\treturn str.replace(/[\\s\\uFEFF\\xA0]+$/g, \"\");\r\n};\r\n\r\n/**\r\n * Removes whitespace from beginning of the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function ltrim(str: string): string {\r\n\treturn str.replace(/^[\\s\\uFEFF\\xA0]+/g, \"\");\r\n};\r\n\r\n/**\r\n * Reverses string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function reverseString(str: string): string {\r\n\treturn str.split(\"\").reverse().join(\"\");\r\n}\r\n\r\n/**\r\n * Removes quotes from the string.\r\n *\r\n * @param str  Input\r\n * @return Output\r\n */\r\nexport function unquote(str: string): string {\r\n\tlet res = str.trim();\r\n\tres = str.replace(/^'(.*)'$/, \"$1\");\r\n\tif (res == str) {\r\n\t\tres = str.replace(/^\"(.*)\"$/, \"$1\");\r\n\t}\r\n\treturn res;\r\n}\r\n\r\n/**\r\n * Pads a string with additional characters to certain length.\r\n *\r\n * @param value  A numeric value\r\n * @param len    Result string length in characters\r\n * @param char   A character to use for padding\r\n * @return Padded value as string\r\n */\r\nexport function padString(value: any, len: number = 0, char: string = \"0\"): string {\r\n\tif (typeof value !== \"string\") {\r\n\t\tvalue = value.toString();\r\n\t}\r\n\r\n\treturn len > value.length ? Array(len - value.length + 1).join(char) + value : value;\r\n}\r\n\r\n/**\r\n * Tries to determine format type.\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format string\r\n * @return Format type (\"string\" | \"number\" | \"date\" | \"duration\")\r\n */\r\nexport function getFormat(format: string): string {\r\n\r\n\t// Undefined?\r\n\tif (typeof format === \"undefined\") {\r\n\t\treturn $strings.STRING;\r\n\t}\r\n\r\n\t// Cleanup and lowercase format\r\n\tformat = format.toLowerCase().replace(/^\\[[^\\]]*\\]/, \"\");\r\n\r\n\t// Remove style tags\r\n\tformat = format.replace(/\\[[^\\]]+\\]/, \"\");\r\n\r\n\t// Trim\r\n\tformat = format.trim();\r\n\r\n\t// Check for any explicit format hints (i.e. /Date)\r\n\tlet hints: RegExpMatchArray | null = format.match(/\\/(date|number|duration)$/);\r\n\r\n\tif (hints) {\r\n\t\treturn hints[1];\r\n\t}\r\n\r\n\t// Check for explicit hints\r\n\tif (format === $strings.NUMBER) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\tif (format === $strings.DATE) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\tif (format === $strings.DURATION) {\r\n\t\treturn $strings.DURATION;\r\n\t}\r\n\r\n\t// Detect number formatting symbols\r\n\tif (format.match(/[#0]/)) {\r\n\t\treturn $strings.NUMBER;\r\n\t}\r\n\r\n\t// Detect date formatting symbols\r\n\tif (format.match(/[ymwdhnsqaxkzgtei]/)) {\r\n\t\treturn $strings.DATE;\r\n\t}\r\n\r\n\t// Nothing? Let's display as string\r\n\treturn $strings.STRING;\r\n}\r\n\r\n/**\r\n * Cleans up format:\r\n * * Strips out formatter hints\r\n *\r\n * @ignore Exclude from docs\r\n * @param format  Format\r\n * @return Cleaned format\r\n */\r\nexport function cleanFormat(format: string): string {\r\n\treturn format.replace(/\\/(date|number|duration)$/i, \"\");\r\n}\r\n\r\n/**\r\n * Strips all tags from the string.\r\n *\r\n * @param text  Source string\r\n * @return String without tags\r\n */\r\nexport function stripTags(text: string): string {\r\n\treturn text ? text.replace(/<[^>]*>/g, \"\") : text;\r\n}\r\n\r\n/**\r\n * Removes new lines and tags from a string.\r\n *\r\n * @param text  String to conver\r\n * @return Converted string\r\n */\r\nexport function plainText(text: string): string {\r\n\treturn text ? stripTags((\"\" + text).replace(/[\\n\\r]+/g, \". \")) : text;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * TYPE CONVERSION FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts numeric value into string. Deals with large or small numbers that\r\n * would otherwise use exponents.\r\n *\r\n * @param value  Numeric value\r\n * @return Numeric value as string\r\n */\r\nexport function numberToString(value: number): string {\r\n\t// TODO handle Infinity and -Infinity\r\n\tif ($type.isNaN(value)) {\r\n\t\treturn \"NaN\";\r\n\t}\r\n\r\n\tif (value === Infinity) {\r\n\t\treturn \"Infinity\";\r\n\t}\r\n\r\n\tif (value === -Infinity) {\r\n\t\treturn \"-Infinity\";\r\n\t}\r\n\r\n\t// Negative 0\r\n\tif ((value === 0) && (1 / value === -Infinity)) {\r\n\t\treturn \"-0\";\r\n\t}\r\n\r\n\t// Preserve negative and deal with absoute values\r\n\tlet negative = value < 0;\r\n\r\n\tvalue = Math.abs(value);\r\n\r\n\t// TODO test this\r\n\tlet parsed = $type.getValue(/^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value));\r\n\tlet digits = parsed[1];\r\n\tlet decimals = parsed[2] || \"\";\r\n\r\n\tlet res: string;\r\n\r\n\t// Leave the nummber as it is if it does not use exponents\r\n\tif (parsed[3] == null) {\r\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\r\n\r\n\t} else {\r\n\t\tlet exponent = +parsed[3];\r\n\r\n\t\t// Deal with decimals\r\n\t\tif (value < 1) {\r\n\t\t\tlet zeros = exponent - 1;\r\n\r\n\t\t\tres = \"0.\" + $string.repeat(\"0\", zeros) + digits + decimals;\r\n\r\n\t\t\t// Deal with integers\r\n\t\t} else {\r\n\t\t\tlet zeros = exponent - decimals.length;\r\n\r\n\t\t\tif (zeros === 0) {\r\n\t\t\t\tres = digits + decimals;\r\n\r\n\t\t\t} else if (zeros < 0) {\r\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\r\n\r\n\t\t\t} else {\r\n\t\t\t\tres = digits + decimals + $string.repeat(\"0\", zeros);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn negative ? \"-\" + res : res;\r\n}\r\n\r\n/**\r\n * Converts anything to Date object.\r\n *\r\n * @param value  A value of any type\r\n * @return Date object representing a value\r\n */\r\nexport function anyToDate(value: Date | number | string): Date {\r\n\tif ($type.isDate(value)) {\r\n\t\t// TODO maybe don't create a new Date ?\r\n\t\tconst date = new Date(value);\r\n\t\t// This is needed because IE does not copy over milliseconds\r\n\t\tdate.setMilliseconds(value.getMilliseconds());\r\n\t\treturn date;\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn new Date(value);\r\n\t}\r\n\r\n\telse {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\treturn new Date(value);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new Date(num);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Tries converting any value to a number.\r\n *\r\n * @param value  Source value\r\n * @return Number\r\n */\r\nexport function anyToNumber(value: Date | number | string): $type.Optional<number> {\r\n\tif ($type.isDate(value)) {\r\n\t\treturn value.getTime();\r\n\t}\r\n\r\n\telse if ($type.isNumber(value)) {\r\n\t\treturn value;\r\n\t}\r\n\r\n\telse if ($type.isString(value)) {\r\n\t\t// Try converting to number (assuming timestamp)\r\n\t\tlet num = Number(value);\r\n\r\n\t\tif (!$type.isNumber(num)) {\r\n\t\t\t// Failing\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn num;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a year day.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Year day\r\n * @todo Account for UTC\r\n */\r\nexport function getYearDay(date: Date, utc: boolean = false): number {\r\n\tconst start = new Date(date.getFullYear(), 0, 0);\r\n\tconst diff = (date.getTime() - start.getTime()) + ((start.getTimezoneOffset() - date.getTimezoneOffset()) * 60 * 1000);\r\n\tconst oneDay = 1000 * 60 * 60 * 24;\r\n\treturn Math.floor(diff / oneDay);\r\n}\r\n\r\n/**\r\n * Returns week number for a given date.\r\n *\r\n * @param date  Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number\r\n * @todo Account for UTC\r\n */\r\nexport function getWeek(date: Date, _utc: boolean = false): number {\r\n\tconst d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\r\n\tconst day = d.getUTCDay() || 7;\r\n\td.setUTCDate(d.getUTCDate() + 4 - day);\r\n\tconst firstDay = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\r\n\treturn Math.ceil((((d.getTime() - firstDay.getTime()) / 86400000) + 1) / 7);\r\n}\r\n\r\n/**\r\n * Returns a week number in the month.\r\n *\r\n * @param date  Source Date\r\n * @param utc   Assume UTC dates?\r\n * @return Week number in month\r\n */\r\nexport function getMonthWeek(date: Date, utc: boolean = false): number {\r\n\tconst firstWeek = getWeek(new Date(date.getFullYear(), date.getMonth(), 1), utc);\r\n\tlet currentWeek = getWeek(date, utc);\r\n\tif (currentWeek == 1) {\r\n\t\tcurrentWeek = 53;\r\n\t}\r\n\treturn currentWeek - firstWeek + 1;\r\n}\r\n\r\n/**\r\n * Returns a year day out of the given week number.\r\n *\r\n * @param week     Week\r\n * @param year     Year\r\n * @param weekday  Weekday\r\n * @param utc      Assume UTC dates\r\n * @return Day in a year\r\n */\r\nexport function getDayFromWeek(week: number, year: number, weekday: number = 1, utc: boolean = false): number {\r\n\tlet date = new Date(year, 0, 4, 0, 0, 0, 0);\r\n\tif (utc) {\r\n\t\tdate.setUTCFullYear(year);\r\n\t}\r\n\tlet day = week * 7 + weekday - ((date.getDay() || 7) + 3);\r\n\treturn day;\r\n}\r\n\r\n/**\r\n * Returns 12-hour representation out of the 24-hour hours.\r\n *\r\n * @param hours  24-hour number\r\n * @return 12-hour number\r\n */\r\nexport function get12Hours(hours: number, base?: number): number {\r\n\tif (hours > 12) {\r\n\t\thours -= 12;\r\n\t}\r\n\telse if (hours === 0) {\r\n\t\thours = 12;\r\n\t}\r\n\treturn $type.hasValue(base) ? hours + (base - 1) : hours;\r\n}\r\n\r\n/**\r\n * Returns a string name of the tome zone.\r\n *\r\n * @param date     Date object\r\n * @param long     Should return long (\"Pacific Standard Time\") or short abbreviation (\"PST\")\r\n * @param savings  Include information if it's in daylight savings mode\r\n * @param utc      Assume UTC dates\r\n * @return Time zone name\r\n */\r\nexport function getTimeZone(date: Date, long: boolean = false, savings: boolean = false, utc: boolean = false): string {\r\n\tif (utc) {\r\n\t\treturn long ? \"Coordinated Universal Time\" : \"UTC\";\r\n\t}\r\n\tlet wotz = date.toLocaleString(\"UTC\");\r\n\tlet wtz = date.toLocaleString(\"UTC\", { timeZoneName: long ? \"long\" : \"short\" }).substr(wotz.length);\r\n\t//wtz = wtz.replace(/[+-]+[0-9]+$/, \"\");\r\n\tif (savings === false) {\r\n\t\twtz = wtz.replace(/ (standard|daylight|summer|winter) /i, \" \");\r\n\t}\r\n\treturn wtz;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * NUMBER-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns a random number between `from` and `to`.\r\n *\r\n * @param from  From number\r\n * @param to    To number\r\n * @return Random number\r\n */\r\nexport function random(from: number, to: number): number {\r\n\treturn Math.floor(Math.random() * (to - from)) + from;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumber(value: number, min: number, max: number): number {\r\n\tif (value > max) {\r\n\t\treturn max;\r\n\t}\r\n\telse if (value < min) {\r\n\t\treturn min;\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n/**\r\n * Fits the number into specific `min` and `max` bounds.\r\n *\r\n * If the value is does not fit withing specified range, it \"wraps\" around the\r\n * values.\r\n *\r\n * For example, if we have input value 10 with min set at 1 and max set at 8,\r\n * the value will not fit. The remainder that does not fit (2) will be added\r\n * to `min`, resulting in 3.\r\n *\r\n * The output of regular `fitNumber()` would return 8 instead.\r\n *\r\n * @param value  Input value\r\n * @param min    Minimum value\r\n * @param max    Maximum value\r\n * @return Possibly adjusted value\r\n */\r\nexport function fitNumberRelative(value: number, min: number, max: number): number {\r\n\tlet gap = max - min;\r\n\tif (value > max) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\telse if (value < min) {\r\n\t\tvalue = min + (value - gap * Math.floor(value / gap));\r\n\t}\r\n\treturn value;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * SPRITE-RELATED FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Converts SVG element coordinates to coordinates within specific [[Sprite]].\r\n *\r\n * @param point   SVG coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function svgPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\tlet sprites: Sprite[] = [];\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tsprites.push(sprite);\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\r\n\t\tsprites.reverse();\r\n\r\n\t\tfor (let i = 0; i < sprites.length; i++) {\r\n\t\t\tlet sprite: Sprite = sprites[i];\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tlet relativeX = x - sprite.pixelX - sprite.ex;\r\n\t\t\tlet relativeY = y - sprite.pixelY - sprite.ey;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\tx -= sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\ty -= sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tx = ($math.cos(-angle) * relativeX - $math.sin(-angle) * relativeY) / scale - sprite.pixelPaddingLeft;\r\n\t\t\ty = ($math.cos(-angle) * relativeY + $math.sin(-angle) * relativeX) / scale - sprite.pixelPaddingTop;\r\n\t\t}\r\n\t}\r\n\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to coordinates relative to the whole\r\n * SVG element.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return SVG coordinates\r\n */\r\nexport function spritePointToSvg(point: IPoint, sprite: Sprite): IPoint {\r\n\tlet x: number = point.x;\r\n\tlet y: number = point.y;\r\n\r\n\tif (sprite) {\r\n\t\twhile ($type.hasValue(sprite.parent)) {\r\n\t\t\tlet angle: number = sprite.rotation;\r\n\r\n\t\t\tx += sprite.pixelPaddingLeft + sprite.ex;\r\n\t\t\ty += sprite.pixelPaddingTop + sprite.ey;\r\n\r\n\t\t\tlet scale = sprite.scale;\r\n\r\n\t\t\t// this handles nonscaling\r\n\t\t\tif(sprite.group){\r\n\t\t\t\tscale = sprite.group.scale; \r\n\t\t\t}\r\n\r\n\t\t\tlet relativeX = sprite.pixelX + ((x * $math.cos(angle) - y * $math.sin(angle))) * scale;\r\n\t\t\tlet relativeY = sprite.pixelY + ((x * $math.sin(angle) + y * $math.cos(angle))) * scale;\r\n\r\n\t\t\tif (sprite.dx) {\r\n\t\t\t\trelativeX += sprite.dx;\r\n\t\t\t}\r\n\t\t\tif (sprite.dy) {\r\n\t\t\t\trelativeY += sprite.dy;\r\n\t\t\t}\r\n\r\n\t\t\tx = relativeX;\r\n\t\t\ty = relativeY;\r\n\r\n\t\t\tsprite = sprite.parent as any;\r\n\t\t}\r\n\t}\r\n\treturn { x: x, y: y };\r\n}\r\n\r\n\r\n/**\r\n * Converts coordinates of one sprite to another.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @param toSprite  Sprite\r\n * @return converted coordinates\r\n */\r\nexport function spritePointToSprite(point: IPoint, sprite: Sprite, toSprite: Sprite): IPoint {\r\n\treturn svgPointToSprite(spritePointToSvg(point, sprite), toSprite);\r\n}\r\n\r\n\r\n/**\r\n * Converts a rectangle expressed in SVG element coordinates to coordinates\r\n * within specific [[Sprite]].\r\n *\r\n * @param rect    SVG rectangle\r\n * @param sprite  Sprite\r\n * @return Sprite rectangle\r\n */\r\nexport function svgRectToSprite(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = svgPointToSprite(rect, sprite);\r\n\tlet p2: IPoint = svgPointToSprite({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts a rectangle expressed in [[Sprite]] coordinates to SVG coordinates.\r\n *\r\n * @param rect    Sprite rectangle\r\n * @param sprite  Sprite\r\n * @return SVG rectangle\r\n */\r\nexport function spriteRectToSvg(rect: IRectangle, sprite: Sprite): IRectangle {\r\n\tlet p1: IPoint = spritePointToSvg(rect, sprite);\r\n\tlet p2: IPoint = spritePointToSvg({ x: rect.x + rect.width, y: rect.y + rect.height }, sprite);\r\n\treturn { x: p1.x, y: p1.y, width: p2.x - p1.x, height: p2.y - p1.y };\r\n}\r\n\r\n/**\r\n * Converts global document-wide coordinates to coordinates within SVG element.\r\n *\r\n * @param point         Global coordinates\r\n * @param svgContainer  SVG element\r\n * @return SVG coordinates\r\n */\r\nexport function documentPointToSvg(point: IPoint, svgContainer: HTMLElement, cssScale?: number): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\tif (!$type.isNumber(cssScale)) {\r\n\t\t\tcssScale = 1;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": (point.x - bbox.left) / cssScale,\r\n\t\t\t\"y\": (point.y - bbox.top) / cssScale\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts SVG coordinates to global document-wide coordinates.\r\n *\r\n * @param point         SVG coordinates\r\n * @param svgContainer  SVG element\r\n * @return Global coordinates\r\n */\r\nexport function svgPointToDocument(point: IPoint, svgContainer: HTMLElement): IPoint {\r\n\ttry {\r\n\t\tlet bbox = svgContainer.getBoundingClientRect();\r\n\r\n\t\treturn {\r\n\t\t\t\"x\": point.x + bbox.left,\r\n\t\t\t\"y\": point.y + bbox.top\r\n\t\t};\r\n\t}\r\n\tcatch (e) {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts document-wide global coordinates to coordinates within specific\r\n * [[Sprite]].\r\n *\r\n * @param point   Global coordinates\r\n * @param sprite  Sprite\r\n * @return Sprite coordinates\r\n */\r\nexport function documentPointToSprite(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = documentPointToSvg(point, $type.getValue(sprite.htmlContainer), sprite.svgContainer.cssScale);\r\n\t\treturn svgPointToSprite(svgPoint, sprite);\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts coordinates within [[Sprite]] to global document coordinates.\r\n *\r\n * @param point   Sprite coordinates\r\n * @param sprite  Sprite\r\n * @return Global coordinates\r\n */\r\nexport function spritePointToDocument(point: IPoint, sprite: Sprite): IPoint {\r\n\tif (sprite && sprite.htmlContainer) {\r\n\t\tlet svgPoint: IPoint = spritePointToSvg(point, sprite);\r\n\t\treturn svgPointToDocument(svgPoint, $type.getValue(sprite.htmlContainer));\r\n\t}\r\n\telse {\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DEPRECATED FUNCTIONS\r\n * @todo Review and remove\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns element's width.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Width (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function width(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingX = parseFloat(cs.paddingLeft) + parseFloat(cs.paddingRight);\r\n\tlet borderX = parseFloat(cs.borderLeftWidth) + parseFloat(cs.borderRightWidth);\r\n\r\n\treturn element.clientWidth - paddingX - borderX;\r\n}\r\n\r\n/**\r\n * Returns element's height.\r\n *\r\n * @ignore Exclude from docs\r\n * @param element  Element\r\n * @return Height (px)\r\n * @deprecated Not used anywhere\r\n */\r\nexport function height(element: HTMLElement): number {\r\n\r\n\tlet cs = getComputedStyle(element);\r\n\r\n\tlet paddingY = parseFloat(cs.paddingTop) + parseFloat(cs.paddingBottom);\r\n\tlet borderY = parseFloat(cs.borderTopWidth) + parseFloat(cs.borderBottomWidth);\r\n\r\n\treturn element.clientHeight - paddingY - borderY;\r\n}\r\n\r\n/**\r\n * Returns number of decimals\r\n *\r\n * @ignore Exclude from docs\r\n * @param number  Input number\r\n * @return Number of decimals\r\n */\r\nexport function decimalPlaces(number: number): number {\r\n\tlet match = ('' + number).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\r\n\tif (!match) { return 0; }\r\n\treturn Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\r\n}\r\n\r\n\r\n/**\r\n * A parsed URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport interface Url {\r\n\tprotocol: string;\r\n\tseparator: string;\r\n\tauthority: string;\r\n\tdomain: string;\r\n\tport: string;\r\n\tpath: string;\r\n\tquery: string;\r\n\thash: string;\r\n}\r\n\r\nconst urlRegexp = /^([a-zA-Z][a-zA-Z0-9\\+\\.\\-]*:)?(?:(\\/\\/)([^\\@]+\\@)?([^\\/\\?\\#\\:]*)(\\:[0-9]+)?)?([^\\?\\#]*)(\\?[^\\#]*)?(\\#.*)?$/;\r\n\r\n/**\r\n * Parses a URL\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function parseUrl(url: string): Url {\r\n\tconst match = urlRegexp.exec(url);\r\n\r\n\treturn {\r\n\t\tprotocol: (match && match[1]) || \"\",\r\n\t\tseparator: (match && match[2]) || \"\",\r\n\t\tauthority: (match && match[3]) || \"\",\r\n\t\tdomain: (match && match[4]) || \"\",\r\n\t\tport: (match && match[5]) || \"\",\r\n\t\tpath: (match && match[6]) || \"\",\r\n\t\tquery: (match && match[7]) || \"\",\r\n\t\thash: (match && match[8]) || \"\"\r\n\t};\r\n}\r\n\r\n/**\r\n * Serializes a Url into a string\r\n *\r\n * @ignore Exclude from docs\r\n */\r\nexport function serializeUrl(url: Url): string {\r\n\treturn url.protocol + url.separator + url.authority + url.domain + url.port + url.path + url.query + url.hash;\r\n}\r\n\r\n/**\r\n * Checks whether a Url is relative or not\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO is this correct ?\r\nfunction isRelativeUrl(url: Url): boolean {\r\n\treturn url.protocol === \"\" &&\r\n\t\turl.separator === \"\" &&\r\n\t\turl.authority === \"\" &&\r\n\t\turl.domain === \"\" &&\r\n\t\turl.port === \"\";\r\n}\r\n\r\n/**\r\n * Joins together two URLs, resolving relative URLs correctly\r\n *\r\n * @ignore Exclude from docs\r\n */\r\n// TODO test this\r\nexport function joinUrl(left: string, right: string): string {\r\n\tconst parsedLeft = parseUrl(left);\r\n\tconst parsedRight = parseUrl(right);\r\n\r\n\tif (isRelativeUrl(parsedLeft)) {\r\n\t\tthrow new Error(\"Left URL is not absolute\");\r\n\t}\r\n\r\n\tif (isRelativeUrl(parsedRight)) {\r\n\t\t// TODO is this correct ?\r\n\t\tif (parsedRight.path !== \"\") {\r\n\t\t\tif (parsedRight.path[0] === \"/\") {\r\n\t\t\t\tparsedLeft.path = parsedRight.path;\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t} else {\r\n\t\t\t\tconst leftPath = parsedLeft.path.split(/\\//);\r\n\t\t\t\tconst rightPath = parsedRight.path.split(/\\//);\r\n\r\n\t\t\t\t// TODO is this correct ?\r\n\t\t\t\tif (leftPath.length === 0) {\r\n\t\t\t\t\tif (rightPath.length !== 0) {\r\n\t\t\t\t\t\tleftPath.push(\"\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if (leftPath.length > 1) {\r\n\t\t\t\t\tleftPath.pop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t$array.pushAll(leftPath, rightPath);\r\n\r\n\t\t\t\tparsedLeft.path = leftPath.join(\"/\");\r\n\r\n\t\t\t\tif (parsedLeft.path !== \"\" && parsedLeft.path[0] !== \"/\") {\r\n\t\t\t\t\tthrow new Error(\"URL path must start with /\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// TODO is this correct ?\r\n\t\tparsedLeft.query = parsedRight.query;\r\n\t\tparsedLeft.hash = parsedRight.hash;\r\n\r\n\t\treturn serializeUrl(parsedLeft);\r\n\r\n\t} else {\r\n\t\treturn serializeUrl(parsedRight);\r\n\t}\r\n}\r\n\r\n/**\r\n * Detects MSIE.\r\n *\r\n * @return Is IE?\r\n */\r\nexport function isIE(): boolean {\r\n\treturn !!(<any>window).MSInputMethodContext && !!(<any>document).documentMode;\r\n}\r\n","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport * as $array from \"./Array\";\r\nimport * as $iter from \"./Iterator\";\r\nimport * as $type from \"./Type\";\r\nimport { Ordering } from \"./Order\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Returns an iterator for all entries in object.\r\n *\r\n * Can be used to safely iterate through all properties of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Iterator\r\n */\r\nexport function entries<Object>(object: Object): $iter.Iterator<[$type.Keyof<Object>, Object[$type.Keyof<Object>]]> {\r\n\treturn (push) => {\r\n\t\t// TODO make this more efficient ?\r\n\t\tfor (let key in object) {\r\n\t\t\tif (hasKey(object, key)) {\r\n\t\t\t\tif (!push([key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>]])) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names.\r\n *\r\n * @param object  Source object\r\n * @returns Object property names\r\n */\r\nexport function keys<Object>(object: Object): Array<$type.Keyof<Object>> {\r\n\tconst output = [];\r\n\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\toutput.push(key as $type.Keyof<Object>);\r\n\t\t}\r\n\t}\r\n\r\n\treturn output;\r\n}\r\n\r\n/**\r\n * Returns an array of object's property names ordered using specific ordering\r\n * function.\r\n *\r\n * @param object  Source object\r\n * @param order   Ordering function\r\n * @returns Object property names\r\n */\r\nexport function keysOrdered<Object>(object: Object, order: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): Array<$type.Keyof<Object>> {\r\n\treturn keys(object).sort(order);\r\n}\r\n\r\n/**\r\n * Checks if `object` has a specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Has key?\r\n */\r\nexport function hasKey<Object, Key extends keyof Object>(object: Object, key: Key): boolean {\r\n\treturn {}.hasOwnProperty.call(object, key);\r\n}\r\n\r\n/**\r\n * Returns value of the specific `key`.\r\n *\r\n * @param object  Source object\r\n * @param key     Property name\r\n * @returns Key value\r\n */\r\nexport function getKey<Object, Key extends keyof Object>(object: Object, key: Key): Object[Key] {\r\n\treturn object[key];\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * If return value of the function evaluates to `false` further iteration is\r\n * cancelled.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function eachContinue<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => boolean): void {\r\n\tfor (let key in object) {\r\n\t\tif (hasKey(object, key)) {\r\n\t\t\tif (!fn(key as $type.Keyof<Object>, object[key] as Object[$type.Keyof<Object>])) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Iterates through all properties of the object calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n */\r\nexport function each<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void): void {\r\n\teachContinue(object, (key, value) => {\r\n\t\tfn(key, value);\r\n\t\treturn true;\r\n\t});\r\n}\r\n\r\n/**\r\n * Orders object properties using custom `ord` function and iterates through\r\n * them calling `fn` for each of them.\r\n *\r\n * @param object  Source object\r\n * @param fn      Callback function\r\n * @param order   Ordering function\r\n */\r\nexport function eachOrdered<Object>(object: Object, fn: <Key extends $type.Keyof<Object>>(key: Key, value: Object[Key]) => void, ord: (a: $type.Keyof<Object>, b: $type.Keyof<Object>) => Ordering): void {\r\n\t$array.each(keysOrdered(object, ord), (key) => {\r\n\t\tfn(key, object[key]);\r\n\t});\r\n}\r\n\r\n/**\r\n * Returns a copy of the object.\r\n *\r\n * @param object  Source object\r\n * @returns Copy of the object\r\n */\r\nexport function copy<Object>(object: Object): Object {\r\n\treturn Object.assign({}, object);\r\n}\r\n\r\n/**\r\n * Merges two objects and returns a new object that contains properties from\r\n * both source objects.\r\n *\r\n * @param object1  Source object #1\r\n * @param object2  Source object #2\r\n * @returns Combined object\r\n */\r\nexport function merge<Object1, Object2>(object1: Object1, object2: Object2): Object1 & Object2 {\r\n\treturn Object.assign({}, object1, object2);\r\n}\r\n\r\n/**\r\n * Returns object clone.\r\n *\r\n * @param object  Source object\r\n * @returns       Clone\r\n */\r\nexport function clone<Object>(object: Object): Object {\r\n\treturn JSON.parse(JSON.stringify(object));\r\n}\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function copyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key])) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another only if target does't have value of the property set.\r\n *\r\n * Will not copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function softCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\tif ($type.hasValue(source[key]) && !($type.hasValue((<any>target)[key]))) {\r\n\t\t\ttarget[key] = source[key];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies a list of properties from one object to another.\r\n *\r\n * Will copy empty properties.\r\n *\r\n * @param source  Source object\r\n * @param target    Target object\r\n * @param keys  List of keys to copy\r\n */\r\nexport function forceCopyProperties(source: { [key: string]: any }, target: { [key: string]: any }, keys: Array<string>): void {\r\n\t$array.each(keys, (key) => {\r\n\t\ttarget[key] = source[key];\r\n\t});\r\n}\r\n\r\n/**\r\n * Copies all properties from one object to another.\r\n *\r\n * @param from  Source object\r\n * @param to    Target object\r\n */\r\nexport function copyAllProperties(from: { [key: string]: any }, to: { [key: string]: any }): void {\r\n\tcopyProperties(from, to, keys(from));\r\n}\r\n","/**\r\n * A collection of String-based constants.\r\n * @hidden\r\n * @ignore Exclude from docs\r\n */\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let PX: string = \"px\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let STRING: string = \"string\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let NUMBER: string = \"number\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let DATE: string = \"date\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let DURATION: string = \"duration\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let PLACEHOLDER: string = \"__§§§__\";\r\n\r\n/**\r\n * @ignore Exclude from docs\r\n */\r\nexport let PLACEHOLDER2: string = \"__§§§§__\";\r\n","/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\nimport { Ordering } from \"./Order\";\n\n\n/**\n * ============================================================================\n * COMPARING FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Comparing function used for ordering.\n *\n * @ignore Exclude from docs\n * @todo Use localeCompare\n * @param a  Item 1\n * @param b  Item 2\n * @return Result\n */\nexport function order(a: string, b: string): Ordering {\n\tif (a === b) {\n\t\treturn 0;\n\n\t} else if (a < b) {\n\t\treturn -1;\n\n\t} else {\n\t\treturn 1;\n\t}\n}\n\n\n/**\n * ============================================================================\n * OTHER FUNCTIONS\n * ============================================================================\n * @hidden\n */\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n\treturn new Array(amount + 1).join(string);\n}\n\n/**\n * Generates a random string `characters` length.\n *\n * @param chars  Number of characters\n * @return Random string\n */\nexport function random(chars: number): string {\n\tlet res = \"\";\n\tlet choice = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\tfor (let i = 0; i < chars; i++) {\n\t\tres += choice.charAt(Math.floor(Math.random() * choice.length));\n\t}\n\treturn res;\n}\n"],"sourceRoot":""}