{"version":3,"sources":["Routes/dashboard/CreateTask/index.js","Routes/dashboard/ReuseComponent/CustomBreadcrumbs.js"],"names":["CreateDataset","props","useHistory","match","location","useState","loading","datasetName","comment","console","log","name","content","title","id","currentPage","data","state","breadcrumbData","fullBlock","style","padding","alignItems","justifyContent","display","CustomBreadcrumbs","navData","useEffect","history","HandleNavigate","item","index","Data","myarray","i","push","url","className","undefined","length","map","onClick"],"mappings":"uNA+FeA,UAhEO,SAACC,GACLC,cACWD,EAAnBE,MAFwB,IAAD,EAEhBC,EAAYH,EAAZG,SACf,EAA8BC,oBAAS,GAAM,mBAAtCC,EAAO,KACd,GAD0B,KACYD,mBAAS,KAAG,mBAA3CE,EAAW,KAClB,GADkC,KACJF,mBAAS,KAAG,mBAAnCG,EAAO,KAAY,KAqC1B,OAHAC,QAAQC,IAAIH,EAAa,gBACzBE,QAAQC,IAAIF,EAAS,cAGnB,qCACE,eAAC,IAAM,WACL,gCAAO,+BACP,sBAAMG,KAAK,cAAcC,QAAQ,yBAEnC,cAAC,IAAY,CACXC,MAAO,cAAC,IAAY,CAACC,GAAG,uBACxBX,MAAOF,EAAME,QAEf,cAAC,IAAiB,CAAIY,YAAa,cAAeC,KAAc,OAARZ,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUa,aAAK,WAAP,EAAR,EAAiBC,iBAEzE,eAAC,IAAkB,CAACC,WAAS,YACvB,qBAAKC,MAAO,CAACC,QAAQ,OAAQC,WAAY,SAAUC,eAAgB,SAAUC,QAAS,UAGzFlB,GAAW,cAAC,IAAgB,SAIrC,C,4FChDemB,IAzCW,SAAH,GAAyC,IAAnCV,EAAW,EAAXA,YAAY,EAAD,EAAEC,YAAI,MAAE,GAAE,EAElD,GAFyD,EAALf,MAEzBI,mBAASW,IAAK,mBAAlCU,EAAO,KAAW,KAGzBC,qBAAU,WAEV,GAAE,IAEA,IAAMC,EAAU1B,cACZO,QAAQC,IAAIM,EAAK,MAErB,IAAMa,EAAc,iDAAG,WAAOC,EAAKC,GAAK,qFAMrC,IALKC,EAAI,YAAON,GACbO,EAAQ,GACZxB,QAAQC,IAAIqB,EAAM,QAAQC,GAGhBE,EAAI,EAAGA,EAAIH,EAAOG,IAE1BD,EAAQE,KAAKnB,EAAKkB,IAExBzB,QAAQC,IAAIuB,EAAQ,WAEhBL,EAAQO,KAAKL,EAAKM,IAAI,CAAClB,eAAee,IAAS,2CAChD,gBAbmB,wCAepB,OACE,sBAAKI,UAAU,wCAAuC,eAC3CC,GAARtB,GAAsBA,EAAKuB,OAAS,GAAIvB,EAAKwB,KAAI,SAACV,EAAMC,GAAK,OAC5D,sBAAiBM,UAAU,mDAAkD,UAE7E,mBAAGA,UAAU,oDAAsD,IAAC,sBAAMI,QAAS,kBAAIZ,EAAeC,EAAKC,EAAM,EAAEM,UAAU,yCAAwC,SAAEP,EAAKnB,SAFlKoB,EAIJ,IAER,sBAAKM,UAAU,8DAA6D,UAAC,mBAAGA,UAAU,qDAAuD,sBAAMA,UAAU,yCAAwC,SAAEtB,SAGjN,C","file":"static/js/126.08917820.chunk.js","sourcesContent":["// rct section loader\nimport RctSectionLoader from \"../../../Components/RctSectionLoader/RctSectionLoader\";\n\n// import { Button } from \"reactstrap\";\n\nimport PageTitleBar from 'Components/PageTitleBar/PageTitleBar'\nimport RctCollapsibleCard from 'Components/RctCollapsibleCard/RctCollapsibleCard'\n// import React,{useState} from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useHistory } from 'react-router'\nimport IntlMessages from 'Util/IntlMessages'\nimport React, { useEffect, useState } from 'react'\nimport {\n    Progress, Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    FormText,\n    Col,\n    FormFeedback, CustomInput\n} from 'reactstrap';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { Avatar } from '@material-ui/core';\nimport { BASE_URL } from 'Api/APIConst';\nimport { NotificationManager } from 'react-notifications'\nimport { createDataset } from 'Api'\nimport AddIcon from '@mui/icons-material/Add';\nimport CustomBreadcrumbs from \"../ReuseComponent/CustomBreadcrumbs\";\n\nconst CreateDataset = (props) => {\n  const history = useHistory();\n  const { match ,location} = props;\n  const [loading, setLoading] = useState(false);\n  const [datasetName, setDatasetName] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n\n  const handleDatasetName = (e) => {\n    setDatasetName(e.target.value)\n  }\n\n  const handleComment = (e) => {\n    setComment(e.target.value)\n  }\n\n  const handleSave = () => {\n    const authToken = JSON.parse(localStorage.getItem(\"token\"));\n    const projectId = localStorage.getItem(\"projId\");\n\n    if(authToken !== null){\n      if(projectId){\n        if(datasetName){\n          console.log(authToken, typeof authToken, \"autthhh token\")\n          createDataset(authToken, projectId, datasetName)\n          .then(res => {\n            console.log(res, \"resss in handle save function\")\n            console.log(res?.data, \"ress dataaa i n handle save function\")\n\n            if(res.status == \"200\"){\n              // NotificationManager.success(\"dataset created !\")\n              setDatasetName(\"\")\n              setComment(\"\");\n            }\n          })\n        }\n      }\n    }\n  }\n\n  console.log(datasetName, \"Dataset name\")\n  console.log(comment, \"Commmenttt\")\n\n  return (\n    <>\n      <Helmet>\n        <title>Automaton | Create Dataset</title>\n        <meta name=\"description\" content=\"Automaton Widgets\" />\n      </Helmet>\n      <PageTitleBar\n        title={<IntlMessages id=\"sidebar.createTask\" />}\n        match={props.match}\n      />\n      <CustomBreadcrumbs    currentPage={\"Create Task\"} data={location?.state?.breadcrumbData}  />\n\n      <RctCollapsibleCard fullBlock>\n            <div style={{padding:\"80px\", alignItems: \"center\", justifyContent: 'center', display: \"flex\", }}>\n                \n            </div>\n        {loading && <RctSectionLoader />}\n      </RctCollapsibleCard>\n    </>\n  );\n};\n\nexport default CreateDataset;\n","import React, { useEffect,useState } from 'react';\nimport { useHistory } from 'react-router';\n\n\nconst CustomBreadcrumbs = ({ currentPage, data =[] ,props}) => {\n\nconst [navData,setNavData]=useState(data)\n\n\nuseEffect(()=>{\n\n},[])\n\n  const history = useHistory();\n      console.log(data,\"..\")\n  \n  const HandleNavigate = async (item,index)=>{\n    const Data = [...navData]\n    let myarray=[]\n    console.log(index,\"Data=\",Data)\n   \n\n     for (let i = 0; i < index; i++) {\n       \n      myarray.push(data[i])\n     }\nconsole.log(myarray,\"myarray\")\n    \n    history.push(item.url,{breadcrumbData:myarray})\n  }\n\n  return (\n    <div className=\"page-title d-flex  align-items-center\">\n      {data != undefined  && data.length > 0 &&data.map((item, index) => (\n        <div key={index} className=\"page-title-wrap  d-flex  align-items-center mr-1\">\n          \n        <i className=\"ti-angle-left text-dark m-0 custombredcrum-icon\"></i> <span onClick={()=>HandleNavigate(item,index)} className=\"globalFontFamily custombredcrum-heding\">{item.name}</span>\n         \n        </div>\n      ))}\n      <div className=\"page-title-wrap   d-flex  align-items-center text-white m-0\"><i className=\"ti-angle-left m-0 text-white custombredcrum-icon\"></i><span className=\"globalFontFamily custombredcrum-heding\">{currentPage}</span></div>\n    </div>\n  );\n};\n\nexport default CustomBreadcrumbs;\n"],"sourceRoot":""}