{"version":3,"sources":["Constants/CurrentTime.js","Routes/dashboard/CreateDataset/index.js","Routes/dashboard/ReuseComponent/CustomBreadcrumbs.js"],"names":["CurrentTime","Time","useState","state","setState","useEffect","setInterval","str","Date","toString","split","ModifiedDate","clearInterval","DashboardModal","require","CreateDataset","props","location","history","useHistory","loading","datasetName","setDatasetName","comment","setComment","open","setOpen","instance","disabled","setDisabled","console","log","name","content","currentPage","data","breadcrumbData","undefined","uppy","target","document","body","onRequestClose","hideCancelButton","hidePauseResumeButton","showPauseResume","proudlyDisplayPoweredByUppy","doneButtonHandler","e","push","url","fullBlock","style","padding","alignItems","justifyContent","display","className","width","backgroundColor","marginTop","row","sm","for","type","onChange","value","height","marginBottom","variant","color","onClick","authToken","JSON","parse","localStorage","getItem","projectId","createDataset","then","res","status","message","NotificationManager","error","Dataset_created","setItem","project_id","id","success","catch","eventBus","dispatch","BreadCrumb","UploadFile2","CustomBreadcrumbs","HandleNavigate","item","index","myarray","i","length","map"],"mappings":"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","file":"static/js/59.b224dbe5.chunk.js","sourcesContent":["\n\n\nimport React,{ useEffect , useState}  from 'react'\n\n\nconst CurrentTime = () => {\n const [state,setState]=useState(\"feching date and time...\")\n\n\n\n\n\n\n\n\nlet Time;\n\n    useEffect(()=>{\n    Time = setInterval(() => {\n         const dateobj = new Date()\n         let str= dateobj.toString().split(\" \")\n         let  ModifiedDate = `${str[0]} ${str[1]} ${str[2]} ${str[3]} ${str[4]}`\n          \n          //  👇️️ Sat Sep 24 2022 07:30:14\n\n           setState(ModifiedDate)\n             \n          \n    }, 1000);\n\nreturn ()=>clearInterval(Time)\n    },[])\n  return (\n    <div >\n         {state}\n    </div>\n  )\n}\n\nexport default CurrentTime\n","import \"./createDataset.css\"\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { Helmet } from \"react-helmet\";\n// // page title bar\n// import PageTitleBar from \"../../../Components/PageTitleBar/PageTitleBar\";\n// // intl messages\n// import IntlMessages from \"../../../Util/IntlMessages\";\n// // rct card box\n// import RctCollapsibleCard from \"../../../Components/RctCollapsibleCard/RctCollapsibleCard\";\n\n// rct section loader\nimport RctSectionLoader from \"../../../Components/RctSectionLoader/RctSectionLoader\";\nimport UploadIcon from '@mui/icons-material/Upload';\n// import { Button } from \"reactstrap\";\n\nimport PageTitleBar from 'Components/PageTitleBar/PageTitleBar'\nimport RctCollapsibleCard from 'Components/RctCollapsibleCard/RctCollapsibleCard'\n// import React,{useState} from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useHistory } from 'react-router'\nimport IntlMessages from 'Util/IntlMessages'\nimport React, { useEffect, useState } from 'react'\nimport {\n  Progress, Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Col,\n  FormFeedback, CustomInput\n} from 'reactstrap';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { Avatar } from '@material-ui/core';\nimport { BASE_URL } from 'Api/APIConst';\nimport { NotificationManager } from 'react-notifications'\nimport { createDataset } from 'Api'\nimport AddIcon from '@mui/icons-material/Add';\nimport CurrentTime from 'Constants/CurrentTime'\nimport eventBus from '../../../Constants/eventBus';\n\n\nimport Uppy from \"@uppy/core\";\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\nimport '@uppy/webcam/dist/style.min.css';\nimport { DragDrop, StatusBar, Dashboard } from '@uppy/react';\nimport Tus from '@uppy/tus'\nimport XHR from '@uppy/xhr-upload';\nimport AwsS3Multipart from '@uppy/aws-s3-multipart';\nimport CustomBreadcrumbs from \"../ReuseComponent/CustomBreadcrumbs\";\nconst { DashboardModal } = require(\"@uppy/react\");\n// Don’t forget to keep the Uppy instance outside of your component.\n// const uppy = new Uppy()\n// // .use(RemoteSources, { companionUrl: 'https://companion.uppy.io' })\n// // .use(Webcam, { target: Dashboard })\n// // .use(ImageEditor, { target: Dashboard })\n// .use(Tus, { endpoint: 'https://tusd.tusdemo.net/files/' })\n// .on('complete', (result) => {\n//   console.log('Upload result:', result)\n// });\n\n;\n\n\n\n\nconst CreateDataset = (props) => {\n\n   const {location}=props\n\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [datasetName, setDatasetName] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const [open, setOpen] = useState()\n  const [instance, setInstance] = useState()\n  const [disabled, setDisabled] = useState(true)\n  \n\n\n\n\n\n  const handleDatasetName = (e) => {\n\n    setDatasetName(e.target.value)\n  }\n\n  const handleComment = (e) => {\n    setComment(e.target.value)\n  }\n\n  const handleSave = () => {\n    const authToken = JSON.parse(localStorage.getItem(\"token\"));\n    const projectId = localStorage.getItem(\"projId\");\n\n    if (authToken !== null) {\n      if (projectId) {\n        if (datasetName) {\n          console.log(authToken, typeof authToken, \"autthhh token\")\n          createDataset(authToken, projectId, datasetName, comment)\n            .then(res => {\n              console.log(res, \"resss in handle save function\")\n              console.log(res?.data, \"ress dataaa i n handle save function\")\n\n              if (res?.status == 200) {\n\n                if (typeof (res?.data?.message) == \"string\") {\n                  NotificationManager.error(res?.data?.message)\n                } else if (res?.data?.message?.Dataset_created) {\n                  localStorage.setItem(\"projId\", res?.data?.message?.Dataset_created?.project_id)\n                  localStorage.setItem(\"datasetId\", res?.data?.message?.Dataset_created?.id)\n\n                  setDisabled(false)\n                  NotificationManager.success(\"Dataset created successfully!\")\n\n                } else {\n                  NotificationManager.error(\"Dataset create process failed!\")\n                }\n\n\n\n              } else {\n\n                NotificationManager.error(\"Dataset create process failed!\")\n              }\n            }).catch((error) => {\n              console.log(\"Dataset create error\", error)\n            })\n        }\n      }\n    }\n  }\n\n  console.log(datasetName, \"Dataset name\")\n  console.log(comment, \"Commmenttt\")\n\n\n  // S3 BUCCEKET  \n\n\n\n\n\n  // const UploadFile = async () => {\n  //   const accessToken = JSON.parse(localStorage.getItem('token'))\n  //   const projectId = JSON.parse(localStorage.getItem('projId'))\n\n  //   if (open === undefined) {\n\n  //     const uppy3 = new Uppy({\n  //       // id : res,e\n  //       // id: projectId,\n  //       autoProceed: false,\n  //       debug: true,\n        \n  //       allowMultipleUploads: true,\n  //       methods: [\"OPTIONS\", \"GET\", \"POST\", \"PATCH\", \"PUT\"],\n  //       exposedHeaders: [\"Access-Control-Allow-Headers\"],\n  //       allowedHeaders: [\n  //         \"uppy-auth-token\",\n  //         \"Content-Type\",\n  //         \"Authorization\",\n  //         \"Uppy-Versions\",\n  //         \"Accept\",\n  //         \"dataset_id\",\n  //         \"id\",\n  //       ],\n  //     }).use(AwsS3Multipart, {\n  //       getChunkSize: () => 5 * 1024 * 1024, // 5MB\n  //       getUploadId: (file) => `${file.id}-${Date.now()}`,\n  //       partSize: 5 * 1024 * 1024, // 5MB\n  //       retryDelays: [0, 1000, 3000, 5000], // Milliseconds between retries\n  //       companionHeaders: {\n  //         \"uppy-auth-token\":\n  //           accessToken +\n  //           \"@@\" + 252,\n\n  //         // this.state.proj_id,\n  //       },\n       \n  //       companionUrl:\n\n  //         \"https://api-automaton.progfeel.co.in/api/automaton/file-uploads/upload-project-video/\",\n\n  //     })\n  //     uppy3 .on('file-added', (file) => {\n  //       console.log('Added file', file);\n\n  //       // uppy3.setFileMeta(\"images\",file );\n  //       // uppy3.setFileState(file.id, { fieldName: 'images' });\n\n  //     })\n  //     uppy3.on('complete', (result) => {\n  //       console.log('Upload result:', result)\n  //     })\n        \n  //     uppy3.on(\"upload-success\", (file, response) => {\n  //         console.log(\"upload-success\");\n         \n  //       })\n  //       uppy3.on('upload-error', (file, error, response) => {\n  //         console.log(\"error===\", file, error, response)\n  //         if (error.isNetworkError) {\n  //           // Let your users know that file upload could have failed\n  //           // due to firewall or ISP issues\n  //           console.log(\"error===\", error)\n  //         }\n  //       })\n\n  //     setInstance(uppy3);\n  //     setOpen(true)\n  //   } else {\n  //     setOpen(true)\n  //   }\n  // }\n\n\nconst UploadFile2=()=>{\n\nlet data =location?.state?.breadcrumbData\n\n  eventBus.dispatch(\"UppyUpload\", {\n    message: {BreadCrumb:data}\n\n  });\n}\n\n\n\n\n\n  const UploadFile = async () => {\n    const accessToken = JSON.parse(localStorage.getItem('token'))\n    const DatasetId = JSON.parse(localStorage.getItem('datasetid'))\n\n    try {\n \n      if (open === undefined) {\n\n\n        const uppy3 = new Uppy({\n          id: 'uppy',\n          autoProceed: false,\n          exposedHeaders: [\"Access-Control-Allow-Headers\"],\n          hidePauseResumeButton:false\n        });\n\n          uppy3.use(XHR, {\n          endpoint: `${BASE_URL}/api/automaton/file-uploads/uppy/xhr/upload/${DatasetId}/`,\n          method: 'POST',\n          \n          fieldName: 'files',\n         \n          headers: {\n            'X-My-Custom-Header': 'header-value',\n            Authorization: accessToken,\n          //  \"Content-Type\": \"multipart/form-data\"\n          \"Acess-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"OPTIONS, GET, POST, PATCH, PUT\",\n          \"Access-Control-Allow-Headers\":\"Origin, X-Requested-With, Content-Type, Accept, Authorization, Extra-Data\",\n          \n          },\n        });\n\n        // Listen for events\n        uppy3.on('file-added', (file) => {\n          console.log('Added file', file);\n        });\n\n        uppy3.on('upload', (data) => {\n          console.log('Started uploading');\n \n        });\n\n        uppy3.on('upload-success', (file, response) => {\n          console.log('Upload successful');\n        });\n\n        uppy3.on('upload-error', (file, error, response) => {\n          console.log('Upload failed', error);\n        });\n        uppy3.on('complete', (result) => {\n          console.log('result result', result);\n          // Do something\n        })\n\n\n\n\n\n     \n\n\n\n\n  //       const uppy3 = await new Uppy({\n  //         id: \"uppy3\",\n  //         autoProceed: false,\n  //         debug: true,\n  //         restrictions: {\n  //           allowedFileTypes: ['image/*'],\n\n  //         },\n\n  //         methods: [\"OPTIONS\", \"GET\", \"POST\", \"PATCH\", \"PUT\"],\n  //         exposedHeaders: [\"Access-Control-Allow-Headers\"],\n\n\n  //       })\n  //         .use(XHR, {\n  //           endpoint: `https://httpbin.org/post`,\n  //           method: 'POST',\n  //           formData: true,\n  //           fieldName: 'file',\n\n  //           headers: {\n  //             Authorization: accessToken,\n  //             \"Content-Type\": \"multipart/form-data\"\n\n  //           },\n  //           formData: (file, formData) => {\n  //              console.log(file,\"sfsdafsdfasdfasdfsd\")\n  //               return {\n  //                 file:file\n  //               }\n  //             }\n\n  //         })\n  //         .on('before-send', (request) => {\n  //           console.log('Payload:', request);\n\n  //         }).on('file-added', (file) => {\n  //           console.log('Added file', file);\n\n  //           // uppy3.setFileMeta(\"images\",file );\n  //           // uppy3.setFileState(file.id, { fieldName: 'images' });\n\n  //         }).on('complete', (result) => {\n  //           console.log('Upload result:', result)\n  //         })\n  //         .on(\"upload-success\", (file, response) => {\n  //           console.log(\"upload-success\");\n\n  //         }).on('upload-error', (file, error, response) => {\n  //           console.log(\"error===\", file, error, response)\n  //           if (error.isNetworkError) {\n  //             // Let your users know that file upload could have failed\n  //             // due to firewall or ISP issues\n  //             console.log(\"error===\", error)\n  //           }\n  //         })\n\n\n\n\n\n  //       // formData: (file, formData) => {\n  //       //   formData.append('file', file.data);\n  //       //   return formData;\n  //       // }\n\n\n  //       // uppy3.on('upload', (data) => {\n\n  //       //   const allFiles = uppy3.getFiles()\n  //       //   console.log(allFiles)\n\n\n\n\n  //         // const fileIDs = Object.keys(files)\n\n  //         // const formData = new FormData()\n\n  //         // const promises =  allFiles.map((fileID)=>{\n\n\n  //         //   formData.append('file',fileID)\n\n\n\n  //       //   const promises = allFiles.map(fileID => {\n  //       //     const file = allFiles[fileID.id]\n\n  //       //     console.log(file,\">>>>file\")\n\n  //       //     const formData = new FormData()\n  //       //     formData.append('file', file)\n  //       //     return fetch(`${BASE_URL}/api/automaton/file-uploads/upload/${143}/`, {\n  //       //       method: 'POST',\n  //       //       headers: {\n  //       //             Authorization: accessToken,\n  //       //             \"Content-Type\": \"multipart/form-data\",\n\n  //       //           },\n  //       //       body: formData\n  //       //     })\n  //       //       .then((response) => {\n\n  //       //         if (response.ok) {\n  //       //           return response.json()\n  //       //         } else {\n  //       //           console.log(\"failed to upload\")\n\n  //       //           // throw new Error('Failed to upload file')\n  //       //         }\n  //       //       })\n  //       //   })\n  //       //   Promise.all(promises)\n  //       //     .then((results) => {\n  //       //       console.log('Upload complete:', results)\n  //       //     })\n  //       //     .catch((error) => {\n  //       //       console.error('Upload failed:', error)\n  //       //     })\n  //       // })\n\n\n  //       uppy3.on('before-send', (request) => {\n\n  //         console.log('Payload:', request.data);\n  //       });\n\n        setInstance(uppy3);\n        setOpen(true)\n      } else {\n        setOpen(true)\n      }\n    } catch (error) {\n      console.log(\"catch \", error)\n    }\n\n\n\n\n  }\n\n\n\n\n\n\n\n  const doneButtonHandler=(e)=>{\n    console.log(\"hello\")\n    \n  let  breadcrumbData =location?.state?.breadcrumbData || []\n     \n  breadcrumbData.push( { name: 'Create Dataset', url: '/app/dashboard/createDataset' })\n  history.push(\"/app/dashboard/createDataset\",{breadcrumbData:breadcrumbData})\n\n    setOpen(false)\n\n  }\n\n\n  console.log(props, \"propsd\")\n  console.log(history, \"open\")\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Automaton | Create Dataset</title>\n        <meta name=\"description\" content=\"Automaton Widgets\" />\n      </Helmet>\n      {/* <PageTitleBar\n        title={<IntlMessages id=\"sidebar.createDataset\" />}\n        match={props.match}\n        \n      /> */}\n      <CustomBreadcrumbs    currentPage={\"CreateDataset\"} data={location?.state?.breadcrumbData}  />\n      {\n        instance != undefined &&\n        <DashboardModal\n          uppy={instance}\n          open={open}\n          target={document.body}\n          onRequestClose={() => setOpen(false)}\n          hideCancelButton={false}\n          hidePauseResumeButton={false}\n          showPauseResume={true}\n          proudlyDisplayPoweredByUppy={false}\n          doneButtonHandler={doneButtonHandler}\n          \n        >\n\n      </DashboardModal>\n      }\n      <RctCollapsibleCard fullBlock>\n        <div style={{ padding: \"80px\", alignItems: \"center\", justifyContent: 'center', display: \"flex\", }}>\n          <div className=\"user-profile-widget box-shadow-box\" style={{ width: \"60%\", backgroundColor: \"white\" }}>\n            <div className=\"p-20 \">\n            <div className=\"d-flex align-items-end justify-content-end pr-10 \">\n\n            <CurrentTime/> \n            </div>\n            \n              <div style={{ marginTop: \"30px\" }}>\n                <FormGroup row >\n                  <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                    <Label for=\"firstName\" sm={3} className=\"d-flex \">\n\n                      <span>Dataset Name<span className=\"text-danger madatory-field\">*</span></span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      className=\"input-md\"\n                      sm={10}\n                      onChange={handleDatasetName}\n                      value={datasetName}\n                    />\n                  </Col>\n\n                </FormGroup>\n                <FormGroup row >\n\n\n                  <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                    <Label for=\"firstName\" sm={3} className=\"d-flex primary-dark\">\n\n                      <span> Comment</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      // className=\"input-lg\"\n                      style={{ height: \"100px\" }}\n                      value={comment}\n                      onChange={handleComment}\n                      sm={10}\n                    />\n                  </Col>\n\n                </FormGroup>\n                <div className=\"d-flex align-items-center justify-content-end\" style={{ marginTop: '30px', marginBottom: \"30px\" }}>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: \"100px\", padding: \"7px 5px\" }} className=\"projectCardButton mx-2\" onClick={handleSave}>Save</Button>\n                  <Button variant=\"contained\" color=\"danger\" style={{ width: \"100px\", padding: \"7px 5px\" }} className=\"mx-2 d-flex justify-content-center align-items-center\" onClick={() => history.push(\"/app/dashboard/project\")}>Cancel</Button>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: \"100px\", padding: \"7px 5px\" }} disabled={disabled} className=\"mx-2 d-flex justify-content-center align-items-center\" onClick={() => UploadFile2()}><UploadIcon />Upload</Button>\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {loading && <RctSectionLoader />}\n      </RctCollapsibleCard>\n    </>\n  );\n};\n\nexport default CreateDataset;\n","import React, { useEffect,useState } from 'react';\nimport { useHistory } from 'react-router';\n\n\nconst CustomBreadcrumbs = ({ currentPage, data =[] ,props}) => {\n\nconst [navData,setNavData]=useState(data)\n\n\nuseEffect(()=>{\n\n},[])\n\n  const history = useHistory();\n      console.log(data,\"daaata..\")\n  \n  const HandleNavigate = async (item,index)=>{\n    // const Data = [...navData]\n    let myarray=[]\n    // console.log(index,\"Data=\",Data)\n\n\n     for (let i = 0; i < index; i++) {\n       \n      myarray.push(data[i])\n     }\nconsole.log(myarray,\"myarray\")\n    \n    history.push(item.url,{breadcrumbData:myarray})\n  }\n\n  return (\n    <div className=\"page-title d-flex  align-items-center\">\n      {data != undefined  && data.length > 0 &&data.map((item, index) => (\n        <div key={index} className=\"page-title-wrap  d-flex  align-items-center mr-1\">\n          \n        <i className=\"ti-angle-left text-dark  custombredcrum-icon\"></i> <span onClick={()=>HandleNavigate(item,index)} className=\"globalFontFamily custombredcrum-heding\">{item.name}</span>\n         \n        </div>\n      ))}\n      <div className=\"page-title-wrap   d-flex  align-items-center text-white m-0\"><i className=\"ti-angle-left  text-white custombredcrum-icon\"></i><span className=\"globalFontFamily custombredcrum-heding\">{currentPage}</span></div>\n    </div>\n  );\n};\n\nexport default CustomBreadcrumbs;\n"],"sourceRoot":""}