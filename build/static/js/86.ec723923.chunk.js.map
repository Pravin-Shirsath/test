{"version":3,"sources":["Routes/dashboard/CreateDataset/index.js"],"names":["DashboardModal","require","CreateDataset","props","history","useHistory","useState","loading","datasetName","setDatasetName","comment","setComment","open","setOpen","instance","setInstance","disabled","setDisabled","console","log","UploadFile","accessToken","JSON","parse","localStorage","getItem","undefined","uppy3","Uppy","id","autoProceed","use","XHR","endpoint","BASE_URL","method","formData","fieldName","headers","Authorization","on","file","data","response","error","name","content","title","match","uppy","target","document","body","onRequestClose","fullBlock","style","padding","alignItems","justifyContent","display","className","width","backgroundColor","marginTop","row","sm","for","type","onChange","e","value","height","marginBottom","variant","color","onClick","authToken","projectId","createDataset","then","res","status","message","NotificationManager","Dataset_created","setItem","project_id","success","catch","push"],"mappings":"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","file":"static/js/86.ec723923.chunk.js","sourcesContent":["import \"./createDataset.css\"\n\n// import React, { useEffect, useState, useRef } from \"react\";\n// import { Helmet } from \"react-helmet\";\n// // page title bar\n// import PageTitleBar from \"../../../Components/PageTitleBar/PageTitleBar\";\n// // intl messages\n// import IntlMessages from \"../../../Util/IntlMessages\";\n// // rct card box\n// import RctCollapsibleCard from \"../../../Components/RctCollapsibleCard/RctCollapsibleCard\";\n\n// rct section loader\nimport RctSectionLoader from \"../../../Components/RctSectionLoader/RctSectionLoader\";\nimport UploadIcon from '@mui/icons-material/Upload';\n// import { Button } from \"reactstrap\";\n\nimport PageTitleBar from 'Components/PageTitleBar/PageTitleBar'\nimport RctCollapsibleCard from 'Components/RctCollapsibleCard/RctCollapsibleCard'\n// import React,{useState} from 'react'\nimport { Helmet } from 'react-helmet'\nimport { useHistory } from 'react-router'\nimport IntlMessages from 'Util/IntlMessages'\nimport React, { useEffect, useState } from 'react'\nimport {\n  Progress, Button,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  Col,\n  FormFeedback, CustomInput\n} from 'reactstrap';\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport { Avatar } from '@material-ui/core';\nimport { BASE_URL } from 'Api/APIConst';\nimport { NotificationManager } from 'react-notifications'\nimport { createDataset } from 'Api'\nimport AddIcon from '@mui/icons-material/Add';\n\n\n\nimport Uppy from \"@uppy/core\";\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\nimport '@uppy/webcam/dist/style.min.css';\nimport { DragDrop, StatusBar, Dashboard } from '@uppy/react';\nimport Tus from '@uppy/tus'\nimport XHR from '@uppy/xhr-upload';\nimport AwsS3Multipart from '@uppy/aws-s3-multipart';\nconst { DashboardModal } = require(\"@uppy/react\");\n// Donâ€™t forget to keep the Uppy instance outside of your component.\n// const uppy = new Uppy()\n// // .use(RemoteSources, { companionUrl: 'https://companion.uppy.io' })\n// // .use(Webcam, { target: Dashboard })\n// // .use(ImageEditor, { target: Dashboard })\n// .use(Tus, { endpoint: 'https://tusd.tusdemo.net/files/' })\n// .on('complete', (result) => {\n//   console.log('Upload result:', result)\n// });\n\n;\n\n\n\n\nconst CreateDataset = (props) => {\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [datasetName, setDatasetName] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const [open, setOpen] = useState()\n  const [instance, setInstance] = useState()\n  const [disabled, setDisabled] = useState(true)\n  const handleDatasetName = (e) => {\n    setDatasetName(e.target.value)\n  }\n\n  const handleComment = (e) => {\n    setComment(e.target.value)\n  }\n\n  const handleSave = () => {\n    const authToken = JSON.parse(localStorage.getItem(\"token\"));\n    const projectId = localStorage.getItem(\"projId\");\n\n    if (authToken !== null) {\n      if (projectId) {\n        if (datasetName) {\n          console.log(authToken, typeof authToken, \"autthhh token\")\n          createDataset(authToken, projectId, datasetName)\n            .then(res => {\n\n\n\n              console.log(res, \"resss in handle save function\")\n              console.log(res?.data, \"ress dataaa i n handle save function\")\n\n              if (res?.status == 200) {\n\n                if (typeof (res?.data?.message) == \"string\") {\n                  NotificationManager.error(res?.data?.message)\n                } else if (res?.data?.message?.Dataset_created) {\n                  localStorage.setItem(\"projId\", res?.data?.message?.Dataset_created?.project_id)\n                  localStorage.setItem(\"datasetid\", res?.data?.message?.Dataset_created?.id)\n                  setDisabled(false)\n                  NotificationManager.success(\"Dataset created !\")\n\n                } else {\n                  NotificationManager.error(\"Dataset create process failed!\")\n                }\n\n\n\n              } else {\n\n                NotificationManager.error(\"Dataset create process failed!\")\n              }\n            }).catch((error) => {\n              console.log(\"Dataset create error\", error)\n            })\n        }\n      }\n    }\n  }\n\n  console.log(datasetName, \"Dataset name\")\n  console.log(comment, \"Commmenttt\")\n\n\n  // S3 BUCCEKET  \n\n\n\n\n\n  // const UploadFile = async () => {\n  //   const accessToken = JSON.parse(localStorage.getItem('token'))\n  //   const projectId = JSON.parse(localStorage.getItem('projId'))\n\n  //   if (open === undefined) {\n\n  //     const uppy3 = new Uppy({\n  //       // id : res,e\n  //       // id: projectId,\n  //       autoProceed: false,\n  //       debug: true,\n        \n  //       allowMultipleUploads: true,\n  //       methods: [\"OPTIONS\", \"GET\", \"POST\", \"PATCH\", \"PUT\"],\n  //       exposedHeaders: [\"Access-Control-Allow-Headers\"],\n  //       allowedHeaders: [\n  //         \"uppy-auth-token\",\n  //         \"Content-Type\",\n  //         \"Authorization\",\n  //         \"Uppy-Versions\",\n  //         \"Accept\",\n  //         \"dataset_id\",\n  //         \"id\",\n  //       ],\n  //     }).use(AwsS3Multipart, {\n  //       getChunkSize: () => 5 * 1024 * 1024, // 5MB\n  //       getUploadId: (file) => `${file.id}-${Date.now()}`,\n  //       partSize: 5 * 1024 * 1024, // 5MB\n  //       retryDelays: [0, 1000, 3000, 5000], // Milliseconds between retries\n  //       companionHeaders: {\n  //         \"uppy-auth-token\":\n  //           accessToken +\n  //           \"@@\" + 252,\n\n  //         // this.state.proj_id,\n  //       },\n       \n  //       companionUrl:\n\n  //         \"https://api-automaton.progfeel.co.in/api/automaton/file-uploads/upload-project-video/\",\n\n  //     })\n  //     uppy3 .on('file-added', (file) => {\n  //       console.log('Added file', file);\n\n  //       // uppy3.setFileMeta(\"images\",file );\n  //       // uppy3.setFileState(file.id, { fieldName: 'images' });\n\n  //     })\n  //     uppy3.on('complete', (result) => {\n  //       console.log('Upload result:', result)\n  //     })\n        \n  //     uppy3.on(\"upload-success\", (file, response) => {\n  //         console.log(\"upload-success\");\n         \n  //       })\n  //       uppy3.on('upload-error', (file, error, response) => {\n  //         console.log(\"error===\", file, error, response)\n  //         if (error.isNetworkError) {\n  //           // Let your users know that file upload could have failed\n  //           // due to firewall or ISP issues\n  //           console.log(\"error===\", error)\n  //         }\n  //       })\n\n  //     setInstance(uppy3);\n  //     setOpen(true)\n  //   } else {\n  //     setOpen(true)\n  //   }\n  // }\n\n  const UploadFile = async () => {\n    const accessToken = JSON.parse(localStorage.getItem('token'))\n\n    try {\n \n      if (open === undefined) {\n\n\n        const uppy3 = new Uppy({\n          id: 'uppy',\n          autoProceed: false,\n        });\n\n          uppy3.use(XHR, {\n          endpoint: `${BASE_URL}/api/automaton/file-uploads/uppy/xhr/upload/${143}/`,\n          method: 'POST',\n          formData: true,\n          fieldName: 'file',\n          headers: {\n            'X-My-Custom-Header': 'header-value',\n            Authorization: accessToken,\n          //  \"Content-Type\": \"multipart/form-data\"\n          },\n        });\n\n        // Listen for events\n        uppy3.on('file-added', (file) => {\n          console.log('Added file', file);\n        });\n\n        uppy3.on('upload', (data) => {\n          console.log('Started uploading');\n \n        });\n\n        uppy3.on('upload-success', (file, response) => {\n          console.log('Upload successful');\n        });\n\n        uppy3.on('upload-error', (file, error, response) => {\n          console.log('Upload failed', error);\n        });\n\n\n\n\n\n\n\n\n\n\n  //       const uppy3 = await new Uppy({\n  //         id: \"uppy3\",\n  //         autoProceed: false,\n  //         debug: true,\n  //         restrictions: {\n  //           allowedFileTypes: ['image/*'],\n\n  //         },\n\n  //         methods: [\"OPTIONS\", \"GET\", \"POST\", \"PATCH\", \"PUT\"],\n  //         exposedHeaders: [\"Access-Control-Allow-Headers\"],\n\n\n  //       })\n  //         .use(XHR, {\n  //           endpoint: `https://httpbin.org/post`,\n  //           method: 'POST',\n  //           formData: true,\n  //           fieldName: 'file',\n\n  //           headers: {\n  //             Authorization: accessToken,\n  //             \"Content-Type\": \"multipart/form-data\"\n\n  //           },\n  //           formData: (file, formData) => {\n  //              console.log(file,\"sfsdafsdfasdfasdfsd\")\n  //               return {\n  //                 file:file\n  //               }\n  //             }\n\n  //         })\n  //         .on('before-send', (request) => {\n  //           console.log('Payload:', request);\n\n  //         }).on('file-added', (file) => {\n  //           console.log('Added file', file);\n\n  //           // uppy3.setFileMeta(\"images\",file );\n  //           // uppy3.setFileState(file.id, { fieldName: 'images' });\n\n  //         }).on('complete', (result) => {\n  //           console.log('Upload result:', result)\n  //         })\n  //         .on(\"upload-success\", (file, response) => {\n  //           console.log(\"upload-success\");\n\n  //         }).on('upload-error', (file, error, response) => {\n  //           console.log(\"error===\", file, error, response)\n  //           if (error.isNetworkError) {\n  //             // Let your users know that file upload could have failed\n  //             // due to firewall or ISP issues\n  //             console.log(\"error===\", error)\n  //           }\n  //         })\n\n\n\n\n\n  //       // formData: (file, formData) => {\n  //       //   formData.append('file', file.data);\n  //       //   return formData;\n  //       // }\n\n\n  //       // uppy3.on('upload', (data) => {\n\n  //       //   const allFiles = uppy3.getFiles()\n  //       //   console.log(allFiles)\n\n\n\n\n  //         // const fileIDs = Object.keys(files)\n\n  //         // const formData = new FormData()\n\n  //         // const promises =  allFiles.map((fileID)=>{\n\n\n  //         //   formData.append('file',fileID)\n\n\n\n  //       //   const promises = allFiles.map(fileID => {\n  //       //     const file = allFiles[fileID.id]\n\n  //       //     console.log(file,\">>>>file\")\n\n  //       //     const formData = new FormData()\n  //       //     formData.append('file', file)\n  //       //     return fetch(`${BASE_URL}/api/automaton/file-uploads/upload/${143}/`, {\n  //       //       method: 'POST',\n  //       //       headers: {\n  //       //             Authorization: accessToken,\n  //       //             \"Content-Type\": \"multipart/form-data\",\n\n  //       //           },\n  //       //       body: formData\n  //       //     })\n  //       //       .then((response) => {\n\n  //       //         if (response.ok) {\n  //       //           return response.json()\n  //       //         } else {\n  //       //           console.log(\"failed to upload\")\n\n  //       //           // throw new Error('Failed to upload file')\n  //       //         }\n  //       //       })\n  //       //   })\n  //       //   Promise.all(promises)\n  //       //     .then((results) => {\n  //       //       console.log('Upload complete:', results)\n  //       //     })\n  //       //     .catch((error) => {\n  //       //       console.error('Upload failed:', error)\n  //       //     })\n  //       // })\n\n\n  //       uppy3.on('before-send', (request) => {\n\n  //         console.log('Payload:', request.data);\n  //       });\n\n        setInstance(uppy3);\n        setOpen(true)\n      } else {\n        setOpen(true)\n      }\n    } catch (error) {\n      console.log(\"catch \", error)\n    }\n\n\n\n\n  }\n\n\n\n\n\n\n\n\n\n\n\n  console.log(open, \"open\")\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Automaton | Create Dataset</title>\n        <meta name=\"description\" content=\"Automaton Widgets\" />\n      </Helmet>\n      <PageTitleBar\n        title={<IntlMessages id=\"sidebar.createDataset\" />}\n        match={props.match}\n      />\n      {\n        instance != undefined &&\n        <DashboardModal\n          uppy={instance}\n          open={open}\n          target={document.body}\n          onRequestClose={() => setOpen(false)}\n        />\n\n      }\n      <RctCollapsibleCard fullBlock>\n        <div style={{ padding: \"80px\", alignItems: \"center\", justifyContent: 'center', display: \"flex\", }}>\n          <div className=\"user-profile-widget box-shadow-box\" style={{ width: \"60%\", backgroundColor: \"white\" }}>\n            <div className=\"p-20\">\n              <div style={{ marginTop: \"30px\" }}>\n                <FormGroup row >\n                  <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                    <Label for=\"firstName\" sm={3} className=\"d-flex \">\n\n                      <span>Dataset Name<span className=\"text-danger madatory-field\">*</span></span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      className=\"input-md\"\n                      sm={10}\n                      onChange={handleDatasetName}\n                      value={datasetName}\n                    />\n                  </Col>\n\n                </FormGroup>\n                <FormGroup row >\n\n\n                  <Col sm={12} className=\"d-flex  align-items-center justify-content-center\">\n                    <Label for=\"firstName\" sm={3} className=\"d-flex primary-dark\">\n\n                      <span> Comment</span>\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      // className=\"input-lg\"\n                      style={{ height: \"100px\" }}\n                      value={comment}\n                      onChange={handleComment}\n                      sm={10}\n                    />\n                  </Col>\n\n                </FormGroup>\n                <div className=\"d-flex align-items-center justify-content-end\" style={{ marginTop: '30px', marginBottom: \"30px\" }}>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: \"100px\", padding: \"7px 5px\" }} className=\"projectCardButton mx-2\" onClick={handleSave}>Save</Button>\n                  <Button variant=\"contained\" color=\"danger\" style={{ width: \"100px\", padding: \"7px 5px\" }} className=\"mx-2 d-flex justify-content-center align-items-center\" onClick={() => history.push(\"/app/dashboard/project\")}>Cancel</Button>\n                  <Button variant=\"contained\" color=\"primary\" style={{ width: \"100px\", padding: \"7px 5px\" }} disabled={disabled} className=\"mx-2 d-flex justify-content-center align-items-center\" onClick={() => UploadFile()}><UploadIcon />Upload</Button>\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {loading && <RctSectionLoader />}\n      </RctCollapsibleCard>\n    </>\n  );\n};\n\nexport default CreateDataset;\n"],"sourceRoot":""}