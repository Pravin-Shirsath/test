{"version":3,"sources":["Components/Widgets/LatestPost.js"],"names":["LatestPost","useState","blogPostData","setBlogPostData","snackbar","setSnackbar","sectionReload","setSectionReload","snackbarMessage","setSnackbarMessage","editPostModal","setEditPostModal","editPost","setEditPost","addNewPostForm","setAddNewPostForm","body","title","id","date","thumbnail","addNewPostDetails","setAddNewPostDetails","useEffect","getBlogData","api","get","then","response","data","catch","error","toggleEditPostModal","onChangePostDetails","key","value","onChangePostAddNewForm","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","map","button","src","alt","href","getTheDate","comments","likes","views","variant","size","onClick","onEditPost","e","post","stopPropagation","posts","index","indexOf","setTimeout","splice","onDeletePost","customClasses","color","isOpen","toggle","for","type","name","onChange","target","newPost","Date","getTime","newPosts","push","onSubmitAddNewPostForm","indexOfPost","i","length","update","$set","onSubmitPostEditDetailForm","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message"],"mappings":"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","file":"static/js/147.9cfb0d45.chunk.js","sourcesContent":["/**\n * Latest Post Widget\n */\nimport React, { useState, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport update from 'react-addons-update';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport {\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Label,\n   Input\n} from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Fab } from '@material-ui/core';\n// api\nimport api from 'Api';\n//Helper\nimport { getTheDate } from 'Helpers/helpers';\n// card component\nimport { RctCardFooter } from 'Components/RctCard';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\nfunction LatestPost(){\n   const [blogPostData, setBlogPostData] = useState(null);\n   const [snackbar, setSnackbar] = useState(false);\n   const [sectionReload, setSectionReload] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('');\n   const [editPostModal, setEditPostModal] = useState(false);\n   const [editPost, setEditPost] = useState(null);\n   const [addNewPostForm, setAddNewPostForm] = useState(false);\n   const [addNewPostDetails, setAddNewPostDetails] = useState({\n      body: '',\n      title: '',\n      id: null,\n      date: null,\n      thumbnail: ''\n   })\n   \n   useEffect(() => {\n      getBlogData();\n   },[]);\n\n   // get Blog Data\n   const getBlogData = () => {\n      setSectionReload(true);\n      api.get('blogData.js')\n         .then((response) => {\n            setBlogPostData(response.data);\n            setSectionReload(false);\n         }).catch(error => {\n            setBlogPostData(null);\n            setSectionReload(false);\n         })\n   }\n\n\t/**\n     * On Delete Post\n   */\n   const onDeletePost = (e, post) =>  {\n      e.stopPropagation();\n      setSectionReload(true);\n      let posts = blogPostData;\n      let index = posts.indexOf(post);\n      setTimeout(() => {\n         posts.splice(index, 1);\n         setBlogPostData(posts);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Post Has Been Moved To Trash');\n      }, 1500);\n   }\n\n   // edit Post\n   const onEditPost = (data) => {\n      setEditPostModal(true);\n      setEditPost(data) ;\n      setAddNewPostForm(false);\n   }\n\n   // toggle edit Post modal\n   const toggleEditPostModal = () => {\n      setEditPostModal(!editPostModal);\n   }\n\n   // submit Post edit form\n   const onSubmitPostEditDetailForm = () => {\n      if (editPost.title !== '' && editPost.body !== '') {\n         setEditPostModal(false);\n         setSectionReload(true);\n         let indexOfPost;\n         for (let i = 0; i < blogPostData.length; i++) {\n            const post = blogPostData[i];\n            if (post.id === editPost.id) {\n               indexOfPost = i;\n            }\n         }\n         setTimeout(() => {\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Post Updated Successfully');\n            setBlogPostData(update(blogPostData,{\n                  [indexOfPost]: { $set: editPost }\n               }\n            ))\n         }, 1500);\n      }\n   }\n\n   // on change Post details\n   const onChangePostDetails = (key, value) => {\n      setEditPost({\n         ...editPost,\n         [key]: value\n      })\n   }\n\n   // add new Post\n   const addNewPost = () => {\n      setEditPostModal(true);\n      setAddNewPostForm(true);\n      setEditPost(null);\n      setAddNewPostDetails({\n         body: '',\n         title: '',\n         id: null,\n         comments: 0,\n         views: 0,\n         likes: 0,\n         thumbnail: \"http://via.placeholder.com/63X63\"\n      })\n   }\n\n   // on change Post add new form value\n   const onChangePostAddNewForm = (key, value) => {\n      setAddNewPostDetails({\n         ...addNewPostDetails,\n         [key]: value\n      })\n   }\n\n   // on submit add new Post form\n   const onSubmitAddNewPostForm = () => {\n      if (addNewPostDetails.title !== '' && addNewPostDetails.body !== '') {\n         setEditPostModal(false);\n         setSectionReload(true);\n         let newPost = addNewPostDetails;\n         newPost.date = new Date().getTime() / 1000;\n         let newPosts = blogPostData;\n         setTimeout(() => {\n            newPosts.push(newPost);\n            setBlogPostData(newPosts);\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Post Added Successfully');\n         }, 1500);\n      }\n   }\n\n   return (\n      <div className=\"blog-list-wrap\">\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={600} autoHide>\n            <List className=\"p-0\">\n               {blogPostData && blogPostData.map((data, key) => (\n                  <ListItem key={key} button className=\"post-item align-items-center justify-content-between py-25\">\n                     <div className=\"post-content d-flex\">\n                        <div className=\"post-img mr-20\">\n                           <img src={data.thumbnail} alt=\"post-img\" className=\"img-fluid\" />\n                        </div>\n                        <div className=\"post-info\">\n                           <h5><a href=\"!#\">{data.title}</a></h5>\n                           <div className=\"meta-info fs-12 text-muted mb-5\">\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-time mr-5\"></i>{getTheDate(data.date, 'DD MMM YYYY')}</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-comment mr-5\"></i>{data.comments} comments</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-favorite mr-5\"></i>{data.likes} Likes</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-eye mr-5\"></i>{data.views} Views</span>\n                           </div>\n                           <p className=\"mb-0\">{data.body}</p>\n                        </div>\n                     </div>\n                     <div className=\"d-flex hover-action\">\n                        <Fab variant=\"round\" size=\"small\" className=\"btn-success text-white m-5\"\n                           onClick={() => onEditPost(data)}\n                        >\n                           <i className=\"zmdi zmdi-edit\"></i>\n                        </Fab>\n                        <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white m-5\"\n                           onClick={(e) => onDeletePost(e, data)}\n                        >\n                           <i className=\"zmdi zmdi-delete\"></i>\n                        </Fab>\n                     </div>\n                  </ListItem>\n               ))}\n            </List>\n         </Scrollbars>\n         <RctCardFooter customClasses=\"d-flex justify-content-between align-items-center\">\n            <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => addNewPost()}>\n               <IntlMessages id=\"widgets.addNew\" />\n            </Button>\n            <span className=\"fs-12 text-base\">\n               <i className=\"mr-15 zmdi zmdi-refresh\"></i>\n               <IntlMessages id=\"widgets.updated10Minago\" />\n            </span>\n         </RctCardFooter>\n         {editPostModal &&\n            <Modal\n               isOpen={editPostModal}\n               toggle={toggleEditPostModal}\n            >\n               <ModalHeader toggle={toggleEditPostModal}>\n                  {addNewPostForm ? 'Add New Post' : 'Edit Post'}\n               </ModalHeader>\n               <ModalBody>\n                  {addNewPostForm ?\n                     <Form>\n                        <FormGroup>\n                           <Label for=\"postTitle\">Title</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"name\"\n                              id=\"postTitle\"\n                              value={addNewPostDetails.title}\n                              onChange={(e) => onChangePostAddNewForm('title', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"postBody\">Content</Label>\n                           <Input\n                              type=\"textarea\"\n                              name=\"textarea\"\n                              id=\"postBody\"\n                              value={addNewPostDetails.body}\n                              onChange={(e) => onChangePostAddNewForm('body', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                     : <Form>\n                        <FormGroup>\n                           <Label for=\"postTitle\">Tilte</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"title\"\n                              id=\"postTitle\"\n                              value={editPost.title}\n                              onChange={(e) => onChangePostDetails('title', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"postContent\">Content</Label>\n                           <Input\n                              type=\"textarea\"\n                              name=\"content\"\n                              id=\"postContent\"\n                              value={editPost.body}\n                              onChange={(e) => onChangePostDetails('body', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                  }\n               </ModalBody>\n               <ModalFooter>\n                  {addNewPostForm ?\n                     <div>\n                        <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitAddNewPostForm()}><IntlMessages id=\"button.add\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditPostModal}><IntlMessages id=\"button.cancel\" /></Button>\n                     </div>\n                     : <div><Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitPostEditDetailForm()}><IntlMessages id=\"button.update\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditPostModal}><IntlMessages id=\"button.cancel\" /></Button></div>\n                  }\n               </ModalFooter>\n            </Modal>\n         }\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </div>\n   );\n}\n\nexport default LatestPost;"],"sourceRoot":""}