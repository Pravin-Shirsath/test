{"version":3,"sources":["Components/Widgets/TaxStats.js","Components/Charts/TinyLineChart.js"],"names":["TaxStats","label","chartdata","labels","className","id","start","end","duration","useEasing","noPadding","borderColor","ChartConfig","color","primary","pointBackgroundColor","height","pointBorderColor","white","borderWidth","customClasses","map","key","TinyLineChart","props","data","canvas","ctx","getContext","_stroke","stroke","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","apply","this","arguments","restore","datasets","fill","lineTension","fillOpacity","pointBorderWidth","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","plugins","legend","display","scales","x","ticks","min","gridLines","y","suggestedMin","beginAtZero"],"mappings":"yGAAA,2EA6CeA,UA/BE,SAAH,OAAMC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAM,EAANA,OAAM,OACxC,eAAC,IAAO,WACJ,sBAAKC,UAAU,iDAAgD,UAC3D,qBAAKA,UAAU,2BAA0B,SACrC,6BAAI,cAAC,IAAY,CAACC,GAAG,oBAEzB,sBAAKD,UAAU,kBAAiB,UAC5B,uBAAMA,UAAU,mCAAkC,UAAC,IAAC,cAAC,IAAO,CAACE,MAAO,EAAGC,IAAK,KAAMC,SAAU,EAAGC,WAAW,OAC1G,mBAAGL,UAAU,6BAA4B,SAAC,eAGlD,cAAC,IAAc,CAACM,WAAS,WACrB,cAAC,IAAa,CACVT,MAAOA,EACPC,UAAWA,EACXC,OAAQA,EACRQ,YAAaC,IAAYC,MAAMC,QAC/BC,qBAAsBH,IAAYC,MAAMC,QACxCE,OAAQ,IACRC,iBAAkBL,IAAYC,MAAMK,MACpCC,YAAa,MAGrB,cAAC,IAAa,CAACC,cAAc,iCAAgC,SACxDjB,GAAUA,EAAOkB,KAAI,SAACpB,EAAOqB,GAAG,OAC7B,sBAAMlB,UAAU,mBAAkB,SAAYH,GAANqB,EAAmB,QAG7D,C,mCC1Cd,kCA8EeC,IApEf,SAAuBC,GACpB,IAAQrB,EAAuGqB,EAAvGrB,OAAQF,EAA+FuB,EAA/FvB,MAAOU,EAAwFa,EAAxFb,YAAaT,EAA2EsB,EAA3EtB,UAAWa,EAAgES,EAAhET,qBAAsBC,EAA0CQ,EAA1CR,OAAQC,EAAkCO,EAAlCP,iBAAkBE,EAAgBK,EAAhBL,YA8D/F,OACG,cAAC,IAAI,CAACM,KA9DI,SAACC,GACX,IAAMC,EAAMD,EAAOE,WAAW,MACxBC,EAAUF,EAAIG,OAUpB,OATAH,EAAIG,OAAS,WACPH,EAAII,OACJJ,EAAIK,YAAcpB,IAAYoB,YAC9BL,EAAIM,WAAa,GACjBN,EAAIO,cAAgB,EACpBP,EAAIQ,cAAgB,GACpBN,EAAQO,MAAMC,KAAMC,WACpBX,EAAIY,SACV,EACO,CACDpC,OAAQA,EACRqC,SAAU,CACP,CACGvC,MAAOA,EACPwC,MAAM,EACNC,YAAa,EACbC,YAAa,GACbhC,YAAaA,EACbQ,YAAaA,EACbF,iBAAkBA,EAClBF,qBAAsBA,EACtB6B,iBAAkBzB,EAClB0B,0BAA2B9B,EAC3B+B,sBAAuB7B,EACvB8B,sBAAuB5B,EACvB6B,YAAa,EACbC,eAAgB,GAChBxB,KAAMvB,IAIrB,EA4BqBgD,QA1BL,CACbC,QAAQ,CACLC,OAAQ,CACLC,SAAS,IAGfC,OAAQ,CACLC,EAAG,CACAF,SAAS,EACTG,MAAO,CACJC,IAAK,GAERC,UAAW,CACRL,SAAS,IAGfM,EAAG,CACAN,SAAS,EACTG,MAAO,CACJI,aAAc,EACdC,aAAa,MAMc7C,OAAQA,GAElD,C","file":"static/js/105.c2fec45f.chunk.js","sourcesContent":["/**\n * Tax Stats Widget\n */\nimport React from 'react';\nimport CountUp from 'react-countup';\n// chart\nimport TinyLineChart from 'Components/Charts/TinyLineChart';\n// constants\nimport ChartConfig from 'Constants/chart-config';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct card box\nimport { RctCard, RctCardContent, RctCardFooter } from 'Components/RctCard';\n\nconst TaxStats = ({ label, chartdata, labels }) => (\n    <RctCard>\n        <div className=\"rct-block-title d-flex justify-content-between\">\n            <div className=\"d-flex align-items-start\">\n                <h4><IntlMessages id=\"widgets.tax\" /></h4>\n            </div>\n            <div className=\"align-items-end\">\n                <span className=\"d-block text-muted counter-point\">$<CountUp start={0} end={1200} duration={3} useEasing={true} /></span>\n                <p className=\"text-right mb-0 text-muted\">+64%</p>\n            </div>\n        </div>\n        <RctCardContent noPadding>\n            <TinyLineChart\n                label={label}\n                chartdata={chartdata}\n                labels={labels}\n                borderColor={ChartConfig.color.primary}\n                pointBackgroundColor={ChartConfig.color.primary}\n                height={100}\n                pointBorderColor={ChartConfig.color.white}\n                borderWidth={4}\n            />\n        </RctCardContent>\n        <RctCardFooter customClasses=\"d-flex justify-content-between\">\n            {labels && labels.map((label, key) => (\n                <span className=\"fs-12 text-muted\" key={key}>{label}</span>\n            ))}\n        </RctCardFooter>\n    </RctCard>\n);\n\nexport default TaxStats;\n","/**\n * Tiny Line Chart Component\n */\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n// chart config file\nimport ChartConfig from 'Constants/chart-config';\n\n// Main Component\nfunction TinyLineChart(props){\n   const { labels, label, borderColor, chartdata, pointBackgroundColor, height, pointBorderColor, borderWidth } = props;\n   const data = (canvas) => {\n      const ctx = canvas.getContext(\"2d\");\n      const _stroke = ctx.stroke;\n      ctx.stroke = function () {\n            ctx.save();\n            ctx.shadowColor = ChartConfig.shadowColor;\n            ctx.shadowBlur = 13;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 12;\n            _stroke.apply(this, arguments);\n            ctx.restore();\n      };\n      return {\n            labels: labels,\n            datasets: [\n               {\n                  label: label,\n                  fill: false,\n                  lineTension: 0,\n                  fillOpacity: 0.3,\n                  borderColor: borderColor,\n                  borderWidth: borderWidth,\n                  pointBorderColor: pointBorderColor,\n                  pointBackgroundColor: pointBackgroundColor,\n                  pointBorderWidth: borderWidth,\n                  pointHoverBackgroundColor: pointBackgroundColor,\n                  pointHoverBorderColor: pointBorderColor,\n                  pointHoverBorderWidth: borderWidth,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: chartdata\n               }\n            ]\n      }\n   }\n   // chart options\n   const options = {\n      plugins:{\n         legend: {\n            display: false\n         }\n      },\n      scales: {\n         x: {\n            display: false,\n            ticks: {\n               min: 0\n            },\n            gridLines: {\n               display: false\n            }\n         },\n         y: {\n            display: false,\n            ticks: {\n               suggestedMin: 0,\n               beginAtZero: true\n            }\n         }\n      }\n   };\n   return (\n      <Line data={data} options={options} height={height} />\n   );    \n}\n\nexport default TinyLineChart;"],"sourceRoot":""}